<?php if(!defined('DEBUG'))exit;defined('TIME_ZONE') OR define('TIME_ZONE','PRC');defined('GROUP_PATH') OR define('GROUP_PATH','zh/');defined('TEMP_PATH') OR define('TEMP_PATH','temp/');defined('ZHPHP_VERSION') OR define('ZHPHP_VERSION','2014-05-28');defined('DEBUG') OR define('DEBUG','');defined('TEMP_NAME') OR define('TEMP_NAME','~boot.php');defined('TEMP_FILE') OR define('TEMP_FILE','temp/~boot.php');defined('ZHPHP_PATH') OR define('ZHPHP_PATH','D:/wamp/www/his/zh/ZHPHP/zhphp/');defined('MAGIC_QUOTES_GPC') OR define('MAGIC_QUOTES_GPC','');defined('ROOT_PATH') OR define('ROOT_PATH','D:/wamp/www/his/');defined('DS') OR define('DS','\\');defined('IS_CGI') OR define('IS_CGI','');defined('IS_WIN') OR define('IS_WIN','\\');defined('IS_CLI') OR define('IS_CLI','');defined('ZHPHP_DATA_PATH') OR define('ZHPHP_DATA_PATH','D:/wamp/www/his/zh/ZHPHP/zhphp/Data/');defined('ZHPHP_LIB_PATH') OR define('ZHPHP_LIB_PATH','D:/wamp/www/his/zh/ZHPHP/zhphp/Lib/');defined('ZHPHP_CONFIG_PATH') OR define('ZHPHP_CONFIG_PATH','D:/wamp/www/his/zh/ZHPHP/zhphp/Config/');defined('ZHPHP_EXTEND_PATH') OR define('ZHPHP_EXTEND_PATH','D:/wamp/www/his/zh/ZHPHP/zhphp/Extend/');defined('ZHPHP_CORE_PATH') OR define('ZHPHP_CORE_PATH','D:/wamp/www/his/zh/ZHPHP/zhphp/Lib/Core/');defined('ZHPHP_DRIVER_PATH') OR define('ZHPHP_DRIVER_PATH','D:/wamp/www/his/zh/ZHPHP/zhphp/Lib/Driver/');defined('ZHPHP_FUNCTION_PATH') OR define('ZHPHP_FUNCTION_PATH','D:/wamp/www/his/zh/ZHPHP/zhphp/Lib/Function/');defined('ZHPHP_LANGUAGE_PATH') OR define('ZHPHP_LANGUAGE_PATH','D:/wamp/www/his/zh/ZHPHP/zhphp/Lib/Language/');defined('ZHPHP_TPL_PATH') OR define('ZHPHP_TPL_PATH','D:/wamp/www/his/zh/ZHPHP/zhphp/Lib/Tpl/');defined('ZHPHP_EVENT_PATH') OR define('ZHPHP_EVENT_PATH','D:/wamp/www/his/zh/ZHPHP/zhphp/Lib/Event/');defined('ZHPHP_ORG_PATH') OR define('ZHPHP_ORG_PATH','D:/wamp/www/his/zh/ZHPHP/zhphp/Extend/Org/');defined('IS_GROUP') OR define('IS_GROUP','\\');defined('STATIC_PATH') OR define('STATIC_PATH','Static/');defined('COMMON_PATH') OR define('COMMON_PATH','zh/Common/');defined('COMMON_CONFIG_PATH') OR define('COMMON_CONFIG_PATH','zh/Common/Config/');defined('COMMON_MODEL_PATH') OR define('COMMON_MODEL_PATH','zh/Common/Model/');defined('COMMON_CONTROL_PATH') OR define('COMMON_CONTROL_PATH','zh/Common/Control/');defined('COMMON_LANGUAGE_PATH') OR define('COMMON_LANGUAGE_PATH','zh/Common/Language/');defined('COMMON_EXTEND_PATH') OR define('COMMON_EXTEND_PATH','zh/Common/Extend/');defined('COMMON_EVENT_PATH') OR define('COMMON_EVENT_PATH','zh/Common/Event/');defined('COMMON_TAG_PATH') OR define('COMMON_TAG_PATH','zh/Common/Tag/');defined('COMMON_LIB_PATH') OR define('COMMON_LIB_PATH','zh/Common/Lib/');final class App { public static function run(){ session(C("SESSION_OPTIONS")); self::loadEventClass(); event("APP_START"); DEBUG and Debug::start("APP_START"); self::start(); DEBUG and Debug::show("APP_START", "APP_END"); Log::save(); event("APP_END"); } static private function loadEventClass(){ $app_end_event = C("app_event.app_end"); if ($app_end_event) { foreach ($app_end_event as $c) { ZHPHP::autoload($c . 'Event'); } } $content_end_event = C("app_event.control_end"); if ($content_end_event) { foreach ($content_end_event as $c) { ZHPHP::autoload($c . 'Event'); } } } static private function start(){ $control = control(CONTROL); if (!$control) { if(IS_GROUP and !is_dir(GROUP_PATH.GROUP_NAME)){ _404('应用组' . GROUP_PATH.GROUP_NAME . '不存在'); } if(!is_dir(APP_PATH)){ _404('应用' . APP . '不存在'); } $control = Control("Empty"); if (!$control) { _404('模块' . CONTROL .C("CONTROL_FIX") .'不存在'); } } try { $method = new ReflectionMethod($control, METHOD); if ($method->isPublic()) { $method->invoke($control); } else { throw new ReflectionException; } } catch (ReflectionException $e) { $method = new ReflectionMethod($control, '__call'); $method->invokeArgs($control, array(METHOD, '')); } } }if (!defined("ZHPHP_PATH")) exit('No direct script access allowed'); abstract class Control { protected $view = null; protected $options = array(); public function __construct() { event("CONTROL_START", $this -> options); if (method_exists($this, "__init")) { $this -> __init(); } if (method_exists($this, "__auto")) { $this -> __auto(); } } public function __call($method, $args) { if (strcasecmp($method, METHOD) == 0) { if (alias_import($method)) { echo __FILE__.'---'.__CLASS__.'---'.__METHOD__; require alias_import($method); } elseif (method_exists($this, "__empty")) { $this -> __empty($args); } else { _404('模块中不存在方法' . $method); } } } protected function display($tplFile = null, $cacheTime = null, $cachePath = null, $stat = false, $contentType = "text/html", $charset = "", $show = true) { $this -> getViewObj(); return $this -> view -> display($tplFile, $cacheTime, $cachePath, $contentType, $charset, $show); } private function getViewObj() { if (is_null($this -> view)) { $this -> view = ViewFactory::factory(); } } protected function assign($name, $value = null) { $this -> getViewObj(); return $this -> view -> assign($name, $value); } public function __set($name, $value) { $this -> assign($name, $value); } protected function ajax($data, $type = "JSON") { $type = strtoupper($type); switch ($type) { case "HTML" : case "TEXT" : $_data = $data; break; case "XML" : echo __FILE__.'---'.__CLASS__.'----'.__METHOD__;die; break; default : $_data = json_encode($data); } echo $_data; exit ; } protected function error($msg = '出错了', $url = NULL, $time = 2, $tpl = null) { $url = $url ? "window.location.href='" . U($url) . "'" : "window.history.back(-1);"; $tpl = $tpl ? $tpl : strstr(C("TPL_ERROR"), '/') ? C("TPL_ERROR") : PUBLIC_PATH . C("TPL_ERROR"); $this -> assign(array("msg" => $msg, 'url' => $url, 'time' => $time)); $this -> display($tpl); exit ; } protected function success($msg = '操作成功', $url = NULL, $time = 2, $tpl = null) { $url = $url ? "window.location.href='" . U($url) . "'" : "window.history.back(-1);"; $tpl = $tpl ? $tpl : strstr(C("TPL_SUCCESS"), '/') ? C("TPL_SUCCESS") : PUBLIC_PATH . C("TPL_SUCCESS"); $this -> assign(array("msg" => $msg, 'url' => $url, 'time' => $time)); $this -> display($tpl); exit ; } public function createHtml($htmlfile, $htmlpath = '', $template = '') { $content = $this -> fetch($template); $htmlpath = empty($htmlpath) ? C('HTML_PATH'): $htmlpath; $file = $htmlpath . $htmlfile . '.html'; $Storage = Storage::init(); return $Storage -> save($file, $content); } protected function fetch($tplFile = null, $cacheTime = null, $cachePath = null, $contentType = "text/html", $charset = "", $show = true) { $this -> getViewObj(); return $this -> view -> fetch($tplFile, $cacheTime, $cachePath, $contentType, $charset); } protected function isCache($cachePath = null) { $args = func_get_args(); $this -> getViewObj(); return call_user_func_array(array($this -> view, "isCache"), $args); } }final class Debug{ static $info = array(); static $runtime; static $memory; static $memory_peak; static $sqlExeArr = array(); static $tpl = array(); static $cache=array("write_s"=>0,"write_f"=>0,"read_s"=>0,"read_f"=>0); static public function start($start) { self::$runtime[$start] = microtime(true); if (function_exists("memory_get_usage")) { self::$memory[$start] = memory_get_usage(); } if (function_exists("memory_get_peak_usage")) { self::$memory_peak[$start] = false; } } static public function runtime($start, $end = '', $decimals = 4) { if (!isset(self::$runtime[$start])) { throw new ZhException('没有设置调试开始点：' . $start); } if (empty(self::$runtime[$end])) { self::$runtime[$end] = microtime(true); return number_format(self::$runtime[$end] - self::$runtime[$start], $decimals); } } static public function memory_perk($start, $end = ''){ echo self::$memory_peak[$start]; if (!isset(self::$memory_peak[$start])) return mt_rand(200000, 1000000); if (!empty($end)){ self::$memory_peak[$end] = memory_get_peak_usage(); } return max(self::$memory_peak[$start], self::$memory_peak[$end]); } static public function show($start, $end){ $debug = array(); $debug['file'] = require_cache(); $debug['runtime'] = self::runtime($start, $end); $debug['memory'] = number_format(self::memory_perk($start, $end) / 1000, 0) . " KB"; require ZHPHP_TPL_PATH . '/debug.php'; } }abstract class Event { }final class ZHPHP{ static public function init(){ if(IS_GROUP){ is_file(COMMON_CONFIG_PATH . 'config.php') and C(require(COMMON_CONFIG_PATH . 'config.php')); is_file(COMMON_CONFIG_PATH . 'event.php') and C('GROUP_EVENT', require COMMON_CONFIG_PATH . 'event.php'); is_file(COMMON_CONFIG_PATH . 'alias.php') and alias_import(COMMON_CONFIG_PATH . 'alias.php'); is_file(COMMON_LANGUAGE_PATH . C('LANGUAGE') . '.php') and L(require COMMON_LANGUAGE_PATH . C('LANGUAGE') . '.php'); } IS_GROUP and Route::group(); if(!defined('GROUP_NAME') ){ if(isset($_GET[C('VAR_GROUP')]) &&!empty($_GET[C('VAR_GROUP')])){ define('GROUP_NAME',$_GET[C('VAR_GROUP')]); }else{ define('GROUP_NAME',C('DEFAULT_GROUP')); } } if(!defined('APP') ){ if(IS_GROUP){ define('APP',ucfirst($_GET[C('VAR_APP')])); }else{ define('APP',ucfirst(basename(substr(APP_PATH, 0, -1)))); } } IS_GROUP and define('APP_PATH', GROUP_PATH . GROUP_NAME . '/' . APP . '/'); defined('CONTROL_PATH') or define('CONTROL_PATH', APP_PATH . 'Control/'); defined('MODEL_PATH') or define('MODEL_PATH', APP_PATH . 'Model/'); defined('CONFIG_PATH') or define('CONFIG_PATH', APP_PATH . 'Config/'); defined('EVENT_PATH') or define('EVENT_PATH', APP_PATH . 'Event/'); defined('LANGUAGE_PATH') or define('LANGUAGE_PATH', APP_PATH . 'Language/'); defined('TAG_PATH') or define('TAG_PATH', APP_PATH . 'Tag/'); defined('LIB_PATH') or define('LIB_PATH', APP_PATH . 'Lib/'); defined('COMPILE_PATH') or define('COMPILE_PATH', TEMP_PATH . (IS_GROUP ? GROUP_NAME . '/' . APP . '/Compile/' : 'Compile/')); defined('CACHE_PATH') or define('CACHE_PATH', TEMP_PATH . (IS_GROUP ? GROUP_NAME . '/' . APP . '/Cache/' : 'Cache/')); defined('TABLE_PATH') or define('TABLE_PATH', TEMP_PATH . (IS_GROUP ? GROUP_NAME . '/' . APP . '/Table/' : 'Table/')); defined('LOG_PATH') or define('LOG_PATH', TEMP_PATH . 'Log/'); is_file(CONFIG_PATH . 'config.php') and C(require(CONFIG_PATH . 'config.php')); is_file(CONFIG_PATH . 'event.php') and C('APP_EVENT', require CONFIG_PATH . 'event.php'); is_file(CONFIG_PATH . 'alias.php') and alias_import(CONFIG_PATH . 'alias.php'); is_file(LANGUAGE_PATH . C('LANGUAGE') . '.php') and L(require LANGUAGE_PATH . C('LANGUAGE') . '.php'); $tpl_style = C('TPL_STYLE'); if($tpl_style and substr($tpl_style,-1)!='/'){ $tpl_style.='/'; } if(!defined('TPL_PATH') ){ if(C('TPL_PATH')){ define('TPL_PATH', C('TPL_PATH').$tpl_style); }else{ define('TPL_PATH', APP_PATH.'Tpl/'.$tpl_style); } } defined('PUBLIC_PATH') or define('PUBLIC_PATH', TPL_PATH . 'Public/'); Route::app(); date_default_timezone_set(C('DEFAULT_TIME_ZONE')); @ini_set('memory_limit', '128M'); @ini_set('register_globals', 'off'); @ini_set('magic_quotes_runtime', 0); define('NOW', $_SERVER['REQUEST_TIME']); define('NOW_MICROTIME', microtime(true)); define('REQUEST_METHOD', $_SERVER['REQUEST_METHOD']); define('IS_GET', REQUEST_METHOD == 'GET' ? true : false); define('IS_POST', REQUEST_METHOD == 'POST' ? true : false); define('IS_PUT', REQUEST_METHOD == 'PUT' ? true : false); define('IS_AJAX', ajax_request()); define('IS_DELETE', REQUEST_METHOD == 'DELETE' ? true : false); spl_autoload_register(array(__CLASS__, 'autoload')); set_error_handler(array(__CLASS__, 'error'), E_ALL); set_exception_handler(array(__CLASS__, 'exception')); register_shutdown_function(array(__CLASS__, 'fatalError')); ZHPHP::_appAutoLoad(); if(!empty($_COOKIE)){ foreach($_COOKIE as $name=>$v){ $name = preg_replace('@[^0-9a-z]@', '', $name); $_COOKIE[$name]=$v; } } } static private function _appAutoLoad() { $files = C('AUTO_LOAD_FILE'); if (is_array($files) && !empty($files)) { foreach ($files as $file) { require_array( array( LIB_PATH . $file, COMMON_LIB_PATH . $file ) ) || require_cache($file); } } } static public function autoload($className){ $class = ucfirst($className) . '.class.php'; if (substr($className, -5) == 'Model') { if (require_array(array( ZHPHP_DRIVER_PATH . 'Model/' . $class, MODEL_PATH . $class, COMMON_MODEL_PATH . $class )) ) return; } elseif (substr($className, -7) == 'Control') { if (require_array(array( ZHPHP_DRIVER_PATH . $class, CONTROL_PATH . $class, COMMON_CONTROL_PATH . $class )) ) return; } elseif (substr($className, 0, 2) == 'Db') { if (require_array(array( ZHPHP_DRIVER_PATH . 'Db/' . $class )) ) return; } elseif (substr($className, 0, 5) == 'Cache') { if (require_array(array( ZHPHP_DRIVER_PATH . 'Cache/' . $class, )) ) return; } elseif (substr($className, 0, 4) == 'View') { if (require_array(array( ZHPHP_DRIVER_PATH . 'View/' . $class, )) ) return; } elseif (substr($className, -5) == 'Event') { if (require_array(array( EVENT_PATH . $class, COMMON_EVENT_PATH . $class )) ) return; } elseif (substr($className, -3) == 'Tag') { if (require_array(array( TAG_PATH . $class, COMMON_TAG_PATH . $class )) ) return; } elseif (substr($className, -7) == 'Storage') { if (require_array(array( ZHPHP_DRIVER_PATH . 'Storage/' . $class )) ) return; } elseif (alias_import($className)) { return; } elseif (require_array(array( LIB_PATH . $class, COMMON_LIB_PATH . $class, ZHPHP_CORE_PATH . $class, ZHPHP_EXTEND_PATH . $class, ZHPHP_EXTEND_PATH . '/Tool/' . $class )) ) { return; } $msg = "Class {$className} not found"; Log::write($msg); halt($msg); } static public function exception($e) { halt($e->__toString()); } static public function error($errno, $error, $file, $line){ switch ($errno) { case E_ERROR: case E_PARSE: case E_CORE_ERROR: case E_COMPILE_ERROR: case E_USER_ERROR: ob_end_clean(); $msg = $error. $file . " 第 $line 行."; if(C('LOG_RECORD')) { Log::write("[$errno] " . $msg, Log::ERROR); } function_exists('halt') ? halt($msg) : exit('ERROR:' . $msg); break; case E_STRICT: case E_USER_WARNING: case E_USER_NOTICE: default: $errorStr = "[$errno] $error " . $file . " 第 $line 行."; trace($errorStr, 'NOTICE'); if (DEBUG && C('SHOW_NOTICE')) require ZHPHP_TPL_PATH . 'notice.html'; break; } } static public function fatalError() { if ($e = error_get_last()) { self::error($e['type'], $e['message'], $e['file'], $e['line']); } } }final class ZhException extends Exception{ private $type; private $extra; public function __construct($message, $code = 0, $extra = false) { parent::__construct($message, $code); $this->type = get_class($this); $this->extra = $extra; } public function __toString() { $trace = $this->getTrace(); $this->class = isset($trace[0]['class']) ? $trace[0]['class'] : ''; $this->function = isset($trace[0]['function']) ? $trace[0]['function'] : ''; $this->file = isset($trace[0]['file']) ? $trace[0]['file'] : ''; $this->line = isset($trace[0]['line']) ? $trace[0]['line'] : ''; $traceInfo = ''; $time = date('y-m-d H:i:m'); foreach ($trace as $t) { if (isset($t['file'])) { $traceInfo .= '[' . $time . '] ' . $t['file'] . ' (' . $t['line'] . ') '; if (isset($t['class'])) { $traceInfo .= $t['class'] . $t['type'] . $t['function']; } $traceInfo .= "\n"; } } $error['message'] = $this->message; $error['type'] = $this->type; $error['class'] = $this->class; $error['function'] = $this->function; $error['file'] = $this->file; $error['line'] = $this->line; $error['trace'] = $traceInfo; if (C('LOG_EXCEPTION_RECORD')) { Log::Write('(' . $this->type . ') ' . $this->message); } return $error; } }class Log{ const FATAL = 'FATAL'; const ERROR = 'ERROR'; const WARNING = 'WARNING'; const NOTICE = 'NOTICE'; const DEBUG = 'DEBUG'; const SQL = 'SQL'; static $log = array(); static public function record($message, $level = self::ERROR, $record = false) { if ($record || in_array($level, C('LOG_LEVEL'))) { self::$log[] = date("[ c ]") . "{$level}: {$message}\r\n"; } } static public function write($message, $level = self::ERROR, $type = 3, $destination = NULL, $extraHeaders = NULL) { if (is_null($destination)) { $destination = ROOT_PATH.LOG_PATH . date("Y_m_d") . ".log"; } if (is_dir(ROOT_PATH.LOG_PATH)) { error_log(date("[ c ]") . "{$level}: {$message}\r\n", $type, $destination, $extraHeaders); } } static public function save($type = 3, $destination = NULL, $extraHeaders = NULL) { if (empty(self::$log)){ return; } if (is_null($destination)) { $destination = ROOT_PATH.LOG_PATH . date("Y_m_d") . ".log"; } if (is_dir(ROOT_PATH.LOG_PATH)) { error_log(implode("", self::$log) . "\r\n", $type, $destination, $extraHeaders); } self::$log = array(); } }final class Route { static private function formatUrl(){ if(C('URL_TYPE') == 3 && isset($_GET[C("PATHINFO_VAR")])){ $query = $_GET[C("PATHINFO_VAR")]; }else if(C('URL_TYPE') == 1 && isset($_SERVER['PATH_INFO'])){ $query = $_SERVER['PATH_INFO']; }else if(isset($_SERVER['PATH_INFO'])){ $query = $_SERVER['PATH_INFO']; }else{ $query = $_SERVER['QUERY_STRING']; } $url = self::parseRoute(str_ireplace(C('PATHINFO_HTML'), '', trim($query, '/'))); $gets = ''; if (C('URL_TYPE') == 1 || (C('URL_TYPE') == 3 && isset($_GET[C("PATHINFO_VAR")]))) { $url = str_replace(array('&', '='), C("PATHINFO_DLI"), $url); }else { parse_str($url, $gets); $_GET = array_merge($_GET, $gets); } if($gets || empty($url)){ return array(); }else{ return explode(C("PATHINFO_DLI"), $url); } } static private function parseRoute($query){ $route = C("ROUTE"); if (!$route or !is_array($route)){ return $query; } foreach ($route as $k => $v) { if (preg_match("@^/.*/[isUx]*$@i", $k)) { if (preg_match($k, $query)) { ; $v = str_replace('#', '\\', $v); return preg_replace($k, $v, $query); } continue; } $search = array( '@(:year)@i', '@(:month)@i', '@(:day)@i', '@(:num)@i', '@(:any)@i', '@(:[a-z0-9]+\\\d)@i', '@(:[a-z0-9]+\\\w)@i', '@(:[a-z0-9]+)@i' ); $replace = array( '\d{4}', '\d{1,2}', '\d{1,2}', '\d+', '.+', '\d+', '\w+', '([a-z0-9]+)' ); $base_preg = "@^" . preg_replace($search, $replace, $k) . "$@i"; if (!preg_match($base_preg, $query)) { continue; } echo __FILE__.'---'.__CLASS__.'---'.__METHOD__; } } static public function group(){ $args = self::formatUrl(); $g = C('VAR_GROUP'); if(isset($_GET[$g])){ }else if($index = array_search($g,$args)){ $_GET[$g]=$args[$index+1]; } $a = C("VAR_APP"); if (isset($_GET[$a])) { }elseif (isset($args[0])) { if ($args[0] == $a) { $_GET[$a] = $args[1]; } else { $_GET[$a] = $args[0]; } }else { $_GET[$a] = C("DEFAULT_APP"); } } static public function app(){ $args = self::formatUrl(); if (IS_GROUP && !empty($args)) { if ($args[0] == C("VAR_APP")) { array_shift($args); array_shift($args); } else { array_shift($args); } } if (isset($_GET[C("VAR_CONTROL")])) { }elseif (isset($args[0]) && !empty($args[0])) { if ($args[0] == C("VAR_CONTROL")) { $_GET[C("VAR_CONTROL")] = $args[1]; array_shift($args); array_shift($args); } else { $_GET[C("VAR_CONTROL")] = $args[0]; array_shift($args); } }else { $_GET[C('VAR_CONTROL')] = C('DEFAULT_CONTROL'); } if (isset($_GET[C("VAR_METHOD")])) { } elseif (isset($args[0]) && !empty($args[0])) { if ($args[0] == C("VAR_METHOD")) { $_GET[C("VAR_METHOD")] = $args[1]; array_shift($args); array_shift($args); } else { $_GET[C("VAR_METHOD")] = $args[0]; array_shift($args); } } else { $_GET[C('VAR_METHOD')] = C('DEFAULT_METHOD'); } $_GET[C('VAR_CONTROL')] = ucwords(@preg_replace('@_([a-z]?)@ei', 'strtoupper("\1")', $_GET[C('VAR_CONTROL')])); if (!empty($args)) { $count = count($args); for ($i = 0; $i < $count;) { $_GET[$args [$i]] = isset($args [$i + 1]) ? $args [$i + 1] : ''; $i += 2; } } if (C('URL_TYPE') == 2) { unset($_GET[C('PATHINFO_VAR')]); } $_REQUEST=array_merge($_REQUEST,$_GET); self::setConst(); } static private function setConst(){ $host = $_SERVER['HTTP_HOST'] ? $_SERVER['HTTP_HOST'] : $_SERVER['SERVER_NAME']; defined('__HOST__') or define("__HOST__", C("HTTPS") ? "https://" : "http://" .$host); $script_file = rtrim($_SERVER['SCRIPT_NAME'],'/'); $root = rtrim(dirname($script_file),'/'); defined('__ROOT__') or define("__ROOT__", __HOST__ . ($root=='/' || $root=='\\'?'':$root)); defined('__WEB__') or define("__WEB__", __HOST__ . $_SERVER['SCRIPT_NAME']); defined('__URL__') or define("__URL__", __HOST__ . '/' . trim($_SERVER['REQUEST_URI'],'/')); defined('__ZHPHP__') or define("__ZHPHP__", __HOST__ . '/' . trim(str_ireplace(str_replace('\\', '/', $_SERVER['DOCUMENT_ROOT']), "", ZHPHP_PATH), '/')); defined('__ZHPHP_DATA__') or define("__ZHPHP_DATA__", __ZHPHP__ . '/Data'); defined('__ZHPHP_TPL__') or define("__ZHPHP_TPL__", __ZHPHP__ . '/Lib/Tpl'); defined('__ZHPHP_EXTEND__') or define("__ZHPHP_EXTEND__", __ZHPHP__ . '/Extend'); defined('CONTROL') or define("CONTROL", ucwords($_GET[C('VAR_CONTROL')])); defined('METHOD') or define("METHOD", $_GET[C('VAR_METHOD')]); switch (C("URL_TYPE")) { case 2: defined('__APP__') or define("__APP__", __WEB__ . (IS_GROUP ? '?' . C('VAR_APP') . '=' . APP : '')); defined('__CONTROL__') or define("__CONTROL__", __APP__ . (IS_GROUP ? '&' . C('VAR_CONTROL') . '=' . CONTROL : '?c=' . CONTROL)); defined('__METH__') or define("__METH__", __CONTROL__ . '&' . C('VAR_METHOD') . '=' . METHOD); break; case 3: defined('__APP__') or define("__APP__", __WEB__ . '?' . C("PATHINFO_VAR") . '=' . (IS_GROUP ? '/' . APP : '')); defined('__CONTROL__') or define("__CONTROL__", __APP__ . '/' . CONTROL); defined('__METH__') or define("__METH__", __CONTROL__ . '/' . METHOD); break; case 1: default: defined('__APP__') or define("__APP__", __WEB__ . (IS_GROUP ? '/' . APP : '')); defined('__CONTROL__') or define("__CONTROL__", __APP__ . '/' . CONTROL); defined('__METH__') or define("__METH__", __CONTROL__ . '/' . METHOD); break; } if (defined("GROUP_PATH")) defined("__GROUP__") or define("__GROUP__", __ROOT__ . '/'.rtrim(GROUP_PATH,'/')); defined("__TPL__") or define("__TPL__", __ROOT__ . '/'.rtrim(TPL_PATH,'/')); defined("__CONTROL_TPL__") or define("__CONTROL_TPL__", __TPL__ .'/'. CONTROL); defined("__STATIC__") or define("__STATIC__", __ROOT__ . '/Static'); defined("__PUBLIC__") or define("__PUBLIC__", __TPL__ . '/Public'); $history= isset($_SERVER["HTTP_REFERER"])?$_SERVER["HTTP_REFERER"]:null; define("__HISTORY__",$history); } static public function toUrl($url){ $route = C("route"); if (!$route) { return $url; } foreach ($route as $routeKey => $routeVal) { $routeKey = trim($routeKey); if (substr($routeKey, 0, 1) === '/') { $regGroup = array(); preg_match_all("@\(.*?\)@i", $routeKey, $regGroup, PREG_PATTERN_ORDER); $searchRegExp = $routeVal; for ($i = 0, $total = count($regGroup[0]); $i < $total; $i++) { $searchRegExp = str_replace('#' . ($i + 1), $regGroup[0][$i], $searchRegExp); } $urlArgs = array(); preg_match_all("@^" . $searchRegExp . "$@i", $url, $urlArgs, PREG_SET_ORDER); if ($urlArgs) { $routeUrl = trim(preg_replace(array('@/\^@', '@/[isUx]$@','@\$@'), array('','',''), $routeKey), '/'); foreach ($regGroup[0] as $k => $v) { $v = preg_replace('@([\*\$\(\)\+\?\[\]\{\}\\\])@', '\\\$1', $v); $routeUrl = preg_replace('@' . $v . '@', $urlArgs[0][$k + 1], $routeUrl, $count = 1); } return trim($routeUrl, '/'); } }else{ $routeGetVars = array(); preg_match_all('/:([a-z]*)/i', $routeKey, $routeGetVars, PREG_PATTERN_ORDER); $getRouteUrl = $routeVal; switch (C("URL_TYPE")) { case 1: $getRouteUrl .= '/'; foreach ($routeGetVars[1] as $getK => $getV) { $getRouteUrl .= $getV . '/(.*)/'; } $getRouteUrl = '@' . trim($getRouteUrl, '/') . '@i'; break; case 2: $getRouteUrl .= '&'; foreach ($routeGetVars[1] as $getK => $getV) { $getRouteUrl .= $getV . '=(.*)' . '&'; } $getRouteUrl = '@' . trim($getRouteUrl, '&') . '@i'; break; } $getArgs = array(); preg_match_all($getRouteUrl, $url, $getArgs, PREG_SET_ORDER); if ($getArgs) { $newUrl = $routeKey; foreach ($routeGetVars[0] as $rk => $getName) { $newUrl = str_replace($getName, $getArgs[0][$rk + 1], $newUrl); } return $newUrl; } } } return $url; } }if (!defined("ZHPHP_PATH")) exit('No direct script access allowed'); function M($table = null, $full = null) { return new Model($table, $full); } function K($class, $param = array()) { $class .= "Model"; return new $class(null, null, null, $param); } function C($name = null, $value = null) { static $config = array(); if (is_null($name)) { return $config; } if (is_array($value)) { $value = array_change_key_case_d($value); } if (is_string($name)) { $name = strtolower($name); if (!strstr($name, '.')) { if (is_null($value)) { if (isset($config[$name]) && !is_array($config[$name])) { $config[$name] = trim($config[$name]); } return isset($config[$name]) ? $config[$name] : null; } if ($name == 'language') { is_file(COMMON_LANGUAGE_PATH . $value . '.php') and L( require COMMON_LANGUAGE_PATH . $value . '.php'); is_file(LANGUAGE_PATH . $value . '.php') and L( require LANGUAGE_PATH . $value . '.php'); } if( isset($config[$name]) && is_array($config[$name]) && is_array($value)){ $config[$name]= array_merge($config[$name], $value); }else{ $config[$name]=$value; } return $config[$name]; } $name = array_change_key_case_d(explode(".", $name), 0); if (is_null($value)) { return isset($config[$name[0]][$name[1]]) ? $config[$name[0]][$name[1]] : null; } $config[$name[0]][$name[1]] = $value; } if (is_array($name)) { $config = array_merge($config, array_change_key_case_d($name, 0)); return true; } } function L($name = null, $value = null) { static $languge = array(); if (is_null($name)) { return $languge; } if (is_string($name)) { $name = strtolower($name); if (!strstr($name, '.')) { if (is_null($value)){ return isset($languge[$name]) ? $languge[$name] : null; } $languge[$name] = $value; return $languge[$name]; } $name = array_change_key_case_d(explode(".", $name), 0); if (is_null($value)) { return isset($languge[$name[0]][$name[1]]) ? $languge[$name[0]][$name[1]] : null; } $languge[$name[0]][$name[1]] = $value; } if (is_array($name)) { $languge = array_merge($languge, array_change_key_case_d($name)); return true; } } function F($name, $value = false, $path = CACHE_PATH) { $_cache = array(); $cacheFile = rtrim($path, '/') . '/' . $name . '.php'; if (is_null($value)) { if (is_file($cacheFile)) { unlink($cacheFile); unset($_cache[$name]); } return true; } if ($value === false) { if (isset($_cache[$name])) return $_cache[$name]; return is_file($cacheFile) ?include $cacheFile : null; } $data = "<?php if(!defined('ZHPHP_PATH'))exit;\nreturn " . compress(var_export($value, true)) . ";\n?>"; is_dir($path) || dir_create($path); if (!file_put_contents($cacheFile, $data)) { return false; } $_cache[$name] = $data; return true; } function S($name, $value = false, $expire = null, $options = array()) { static $_data = array(); $cacheObj = Cache::init($options); if (is_null($value)) { return $cacheObj -> del($name); } $driver = isset($options['Driver']) ? $options['Driver'] : ''; $key = $name . $driver; if ($value === false) { if (isset($_data[$key])) { Debug::$cache['read_s']++; return $_data[$key]; }else { return $cacheObj -> get($name, $expire); } } $cacheObj -> set($name, $value, $expire); $_data[$key] = $value; return true; } function V($tableName = null, $full = null) { return new ViewModel($tableName, $full); } function ajax_request() { if (isset($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') return true; return false; } function show($var) { if (is_bool($var)) { var_dump($var); } else if (is_null($var)) { var_dump(NULL); } else { echo "<pre style='padding:10px;border-radius:5px;background:#F5F5F5;border:1px solid #aaa;font-size:14px;line-height:18px;'>" . print_r($var, true) . "</pre>"; } } function p($var) { show($var); } function go($url, $time = 0, $msg = '') { $url = U($url); if (!headers_sent()) { $time == 0 ? header("Location:" . $url) : header("refresh:{$time};url={$url}"); exit($msg); } else { echo "<meta http-equiv='Refresh' content='{$time};URL={$url}'>"; if ($time) exit($msg); } } function session($name = '', $value = '') { if (is_array($name)) { ini_set('session.auto_start', 0); if (isset($name['name'])){ session_name($name['name']); } if (isset($_REQUEST[session_name()])){ session_id($_REQUEST[session_name()]); } if (isset($name['path'])){ session_save_path($name['path']); } if (isset($name['domain'])){ ini_set('session.cookie_domain', $name['domain']); } if (isset($name['expire'])){ ini_set('session.gc_maxlifetime', $name['expire']); } if (isset($name['use_trans_sid'])){ ini_set('session.use_trans_sid', $name['use_trans_sid'] ? 1 : 0); } if (isset($name['use_cookies'])){ ini_set('session.use_cookies', $name['use_cookies'] ? 1 : 0); } if (isset($name['cache_limiter'])){ session_cache_limiter($name['cache_limiter']); } if (isset($name['cache_expire'])){ session_cache_expire($name['cache_expire']); } if (isset($name['type'])) { C('SESSION_TYPE', $name['type']); } if (C('SESSION_TYPE')) { $class = 'Session' . ucwords(strtolower(C('SESSION_TYPE'))); require_cache(ZHPHP_DRIVER_PATH . '/Session/' . $class . '.class.php'); $hander = new $class(); $hander -> run(); } if (C("SESSION_AUTO_START")) session_start(); }elseif ($value === '') { if ('[pause]' == $name) { session_write_close(); } elseif ('[start]' == $name) { session_start(); } elseif ('[destroy]' == $name) { $_SESSION = array(); session_unset(); session_destroy(); } elseif ('[regenerate]' == $name) { session_regenerate_id(); } elseif (0 === strpos($name, '?')) { $name = substr($name, 1); return isset($_SESSION[$name]); } elseif (is_null($name)) { $_SESSION = array(); } else { return isset($_SESSION[$name]) ? $_SESSION[$name] : null; } }elseif (is_null($value)) { if (isset($_SESSION[$name])) unset($_SESSION[$name]); }elseif (is_null($name)) { $_SESSION = array(); session_unset(); session_destroy(); } elseif ($name === '') { return $_SESSION; }else { $_SESSION[$name] = $value; } } function event($name, &$param = array()) { $core = C("CORE_EVENT." . $name); $group = C("GROUP_EVENT." . $name); $event = C("APP_EVENT." . $name); if (is_array($group)) { if ($core) { $group = array_merge($core, $group); } } else { $group = $core; } if (is_array($group)) { if ($event) { $event = array_merge($group, $event); } else { $event = $group; } } if (is_array($event) && !empty($event)) { foreach ($event as $e) { E($e, $param); } } } function E($name, &$params = null) { $class = $name . "Event"; $event = new $class; $event -> run($params); } function control($class, $method = NULL, $args = array()) { $class = $class.C('CONTROL_FIX'); $classfile =$class.'.class.php'; if (require_array( array( ZHPHP_CORE_PATH . $classfile, CONTROL_PATH . $classfile, COMMON_CONTROL_PATH . $classfile))) { if (class_exists($class)) { $obj = new $class(); if ($method && method_exists($obj, $method)) { return call_user_func_array(array(&$obj, $method), $args); } return $obj; } }else{ return false; } } function set_http_state($code) { $state = array(200 => 'OK', 301 => 'Moved Permanently', 302 => 'Moved Temporarily ', 400 => 'Bad Request', 403 => 'Forbidden', 404 => 'Not Found', 500 => 'Internal Server Error', 503 => 'Service Unavailable', ); if (isset($state[$code])) { header('HTTP/1.1 ' . $code . ' ' . $state[$code]); header('Status:' . $code . ' ' . $state[$code]); } } function ip_get_client($type = 0) { $type = intval($type); $ip = ''; if (isset($_SERVER)) { if (isset($_SERVER["HTTP_X_FORWARDED_FOR"])) { $ip = $_SERVER["HTTP_X_FORWARDED_FOR"]; } else if (isset($_SERVER["HTTP_CLIENT_IP"])) { $ip = $_SERVER["HTTP_CLIENT_IP"]; } else { $ip = $_SERVER["REMOTE_ADDR"]; } } else { if (getenv("HTTP_X_FORWARDED_FOR")) { $ip = getenv("HTTP_X_FORWARDED_FOR"); } else if (getenv("HTTP_CLIENT_IP")) { $ip = getenv("HTTP_CLIENT_IP"); } else { $ip = getenv("REMOTE_ADDR"); } } $long = ip2long($ip); $clientIp = $long ? array($ip, $long) : array("0.0.0.0", 0); return $clientIp[$type]; } function import($class = null, $base = null, $ext = ".class.php") { $class = str_replace(".", "/", $class); if (is_null($base)) { $info = explode("/", $class); if ($info[0] == '@' || APP == $info[0]) { $base = APP_PATH; $class = substr_replace($class, '', 0, strlen($info[0]) + 1); }elseif ($info[0] == '@@') { $base = GROUP_PATH; $class = substr_replace($class, '', 0, strlen($info[0]) + 1); }elseif (strtoupper($info[0]) == 'ZHPHP') { $base = dirname(substr_replace($class, ZHPHP_PATH, 0, 6)); $class = basename($class); } elseif (in_array(strtoupper($info[0]), array("LIB", "ORG"))) { $base = APP_PATH; } else { $base = APP_PATH . '../' . $info[0] . '/'; $class = substr_replace($class, '', 0, strlen($info[0]) + 1); } }else { $base = str_replace('.', '/', $base); } if (substr($base, -1) != '/') $base .= '/'; $file = $base . $class . $ext; if (!class_exists(basename($class), false)) { return require_cache($file); } return true; } function print_const($view = true, $tplConst = false) { $define = get_defined_constants(true); $const = $define['user']; if ($tplConst) { $const = array(); foreach ($define['user'] as $k => $d) { if (preg_match('/^__/', $k)) { $const[$k] = $d; } } } if ($view) { p($const); } else { return $const; } } function Q($var, $default = null, $filter = null) { $var = explode(".", $var); if (count($var) == 1) { array_unshift($var, 'request'); } $var[0] = strtolower($var[0]); switch (strtolower($var[0])) { case 'get' : $data = &$_GET; break; case 'post' : $data = &$_POST; break; case 'request' : $data = &$_REQUEST; break; case 'files' : $data = &$_FILES; break; case 'session' : $data = &$_SESSION; break; case 'cookie' : $data = &$_COOKIE; break; case 'server' : $data = &$_SERVER; break; case 'globals' : $data = &$GLOBALS; break; default : throw_exception($var[0] . 'Q方法参数错误'); } if (empty($var[1])) { return $data; } else if (isset($data[$var[1]])) { $value = $data[$var[1]]; $funcArr = is_null($filter) ? C("FILTER_FUNCTION") : $filter; if (is_string($funcArr) && !empty($funcArr)) { $funcArr = explode(",", $funcArr); } if (!empty($funcArr) && is_array($funcArr)) { foreach ($funcArr as $func) { if (!function_exists($func)) continue; $value = is_array($value) ? array_map($func, $value) : $func($value); } $data[$var[1]] = $value; return $value; } return $value; }else { $data[$var[1]] = $default; return $default; } } function date_before($time, $unit = null) { $time = intval($time); $unit = is_null($unit) ? array("年", "月", "星期", "天", "小时", "分钟", "秒") : $unit; switch (true) { case $time < (NOW - 31536000) : return floor((NOW - $time) / 31536000) . $unit[0] . '前'; case $time < (NOW - 2592000) : return floor((NOW - $time) / 2592000) . $unit[1] . '前'; case $time < (NOW - 604800) : return floor((NOW - $time) / 604800) . $unit[2] . '前'; case $time < (NOW - 86400) : return floor((NOW - $time) / 86400) . $unit[3] . '前'; case $time < (NOW - 3600) : return floor((NOW - $time) / 3600) . $unit[4] . '前'; case $time < (NOW - 60) : return floor((NOW - $time) / 60) . $unit[5] . '前'; default : return floor(NOW - $time) . $unit[6] . '前'; } } function _default($varName, $value = "") { return isset($varName) && !empty($varName) ? $varName : $value; } function addslashes_d($data) { if (is_string($data)) { return addslashes($data); } if (is_numeric($data)) { return $data; } if (is_array($data)) { $var = array(); foreach ($data as $k => $v) { if (is_array($v)) { $var[$k] = addslashes_d($v); continue; } else { $var[$k] = addslashes($v); } } return $var; } } function sanitize_url($url , $check = 'http://') { if (strpos( $url, $check ) === false) { $url = $check . $url; } return $url; } function isMobile() { if (isset ($_SERVER['HTTP_X_WAP_PROFILE'])) { return true; } if (isset ($_SERVER['HTTP_VIA'])) { return stristr($_SERVER['HTTP_VIA'], "wap") ? true : false; } if (isset ($_SERVER['HTTP_USER_AGENT'])) { $clientkeywords = array ('nokia', 'sony', 'ericsson', 'mot', 'samsung', 'htc', 'sgh', 'lg', 'sharp', 'sie-', 'philips', 'panasonic', 'alcatel', 'lenovo', 'iphone', 'ipod', 'blackberry', 'meizu', 'android', 'netfront', 'symbian', 'ucweb', 'windowsce', 'palm', 'operamini', 'operamobi', 'openwave', 'nexusone', 'cldc', 'midp', 'wap', 'mobile' ); if (preg_match("/(" . implode('|', $clientkeywords) . ")/i", strtolower($_SERVER['HTTP_USER_AGENT']))) { return true; } } if (isset ($_SERVER['HTTP_ACCEPT'])) { if ((strpos($_SERVER['HTTP_ACCEPT'], 'vnd.wap.wml') !== false) && (strpos($_SERVER['HTTP_ACCEPT'], 'text/html') === false || (strpos($_SERVER['HTTP_ACCEPT'], 'vnd.wap.wml') < strpos($_SERVER['HTTP_ACCEPT'], 'text/html')))) { return true; } } return false; } function getBrowserLang(){ $returnLan=""; $lang=""; if(isset($_SERVER['HTTP_ACCEPT_LANGUAGE'])){ $lang = substr($_SERVER['HTTP_ACCEPT_LANGUAGE'], 0, 4); } if (preg_match("/zh-c/i", $lang)) $returnLan="zh"; else if (preg_match("/ja/i", $lang)) $returnLan="ja"; else $returnLan=C('LANGUAGE'); return $returnLan; } function getEnableLan(){ return array( "zh"=>"中文", "ja"=>"日本語" ); } function array_sort_images($images){ $pathArrays=$images['path']; $altArrays=$images['alt']; for ($i = 1;$i < count($altArrays);$i++){ for ($j = 0;$j < count($altArrays) - $i;$j++){ if ($altArrays[$j] > $altArrays[$j + 1]){ $temp = $altArrays[$j]; $altArrays[$j] = $altArrays[$j + 1]; $altArrays[$j + 1] = $temp; $tempValue = $pathArrays[$j]; $pathArrays[$j] = $pathArrays[$j + 1]; $pathArrays[$j + 1] = $tempValue; } } } $images['path']=$pathArrays; $images['alt']=$altArrays; return $images; } function html_options($arr) { $selected = $arr['selected']; if ($arr['options']) { $options = (array)$arr['options']; } elseif ($arr['output']) { if ($arr['values']) { foreach ($arr['output'] AS $key => $val) { $options["{$arr[values][$key]}"] = $val; } } else { $options = array_values((array)$arr['output']); } } if ($options) { foreach ($options AS $key => $val) { $out .= $key == $selected ? "<option value=\"$key\" selected>$val</option>" : "<option value=\"$key\">$val</option>"; } } return $out; } function real_ip() { static $realip = NULL; if ($realip !== NULL) { return $realip; } if (isset($_SERVER)) { if (isset($_SERVER['HTTP_X_FORWARDED_FOR'])) { $arr = explode(',', $_SERVER['HTTP_X_FORWARDED_FOR']); foreach ($arr AS $ip) { $ip = trim($ip); if ($ip != 'unknown') { $realip = $ip; break; } } } elseif (isset($_SERVER['HTTP_CLIENT_IP'])) { $realip = $_SERVER['HTTP_CLIENT_IP']; } else { if (isset($_SERVER['REMOTE_ADDR'])) { $realip = $_SERVER['REMOTE_ADDR']; } else { $realip = '0.0.0.0'; } } } else { if (getenv('HTTP_X_FORWARDED_FOR')) { $realip = getenv('HTTP_X_FORWARDED_FOR'); } elseif (getenv('HTTP_CLIENT_IP')) { $realip = getenv('HTTP_CLIENT_IP'); } else { $realip = getenv('REMOTE_ADDR'); } } preg_match("/[\d\.]{7,15}/", $realip, $onlineip); $realip = !empty($onlineip[0]) ? $onlineip[0] : '0.0.0.0'; return $realip; } function buildInStr($itemList,$key,$split=','){ $item_list_tmp = ''; foreach ($itemList AS $item) { if ($item[$key] !== '') { $item_list_tmp .= $item_list_tmp ? "$split$item[$key]" : "$item[$key]"; } } return $item_list_tmp; } function defaultv($value,$defaultValue){ $p=empty($value)? $defaultValue : $value; return $p; } function escape($value){ $p=htmlspecialchars($value); return $p; } function cookie($name, $value = '', $option = array()) { $config = array('prefix' => C('COOKIE_PREFIX'), 'expire' => C('COOKIE_EXPIRE'), 'path' => C('COOKIE_PATH'), 'domain' => C('COOKIE_DOMAIN'), ); if (!empty($option)) { if (is_numeric($option)) $option = array('expire' => $option); elseif (is_string($option)) parse_str($option, $option); $config = array_merge($config, array_change_key_case($option)); } if (is_null($name)) { if (empty($_COOKIE)) return; $prefix = empty($value) ? $config['prefix'] : $value; if (!empty($prefix)) { foreach ($_COOKIE as $key => $val) { if (0 === stripos($key, $prefix)) { setcookie($key, '', time() - 3600, $config['path'], $config['domain']); unset($_COOKIE[$key]); } } } return $_COOKIE; } $name = $config['prefix'] . $name; if ('' === $value) { return isset($_COOKIE[$name]) ? json_decode(MAGIC_QUOTES_GPC ? stripslashes($_COOKIE[$name]) : $_COOKIE[$name]) : null; } else { if (is_null($value)) { setcookie($name, '', time() - 3600, $config['path'], $config['domain']); unset($_COOKIE[$name]); } else { $value = json_encode($value); $expire = !empty($config['expire']) ? time() + intval($config['expire']) : 0; setcookie($name, $value, $expire, $config['path'], $config['domain']); $_COOKIE[$name] = $value; } } } function local_mktime($hour = NULL , $minute= NULL, $second = NULL, $month = NULL, $day = NULL, $year = NULL) { $timezone = isset($_SESSION['timezone']) ? $_SESSION['timezone'] : TIME_ZONE; $time = mktime($hour, $minute, $second, $month, $day, $year) - $timezone * 3600; return $time; } function sub_str($str, $length = 0, $append = true) { $str = trim($str); $strlength = strlen($str); if ($length == 0 || $length >= $strlength) { return $str; } elseif ($length < 0) { $length = $strlength + $length; if ($length < 0) { $length = $strlength; } } if (function_exists('mb_substr')) { $newstr = mb_substr($str, 0, $length, C('CHARSET')); } elseif (function_exists('iconv_substr')) { $newstr = iconv_substr($str, 0, $length, C('CHARSET')); } else { $newstr = substr($str, 0, $length); } if ($append && $str != $newstr) { $newstr .= '...'; } return $newstr; }function U($pathinfo, $args = array()){ $_old_url =$pathinfo; $pathinfo=str_ireplace(array(__WEB__,__ROOT__),'',$pathinfo); if (preg_match("/^https?:\/\//i", $pathinfo) || empty($pathinfo)) return $_old_url; $end = strpos($pathinfo, '.php'); if ($end) { $web = __ROOT__ . '/' . trim(substr($pathinfo, 0, $end + 4),'/'); $pathinfo = trim(substr($pathinfo, $end + 4),'/'); } else { $web = __WEB__; } if (is_string($args)) { parse_str($args, $args); } $parseUrl = parse_url(trim($pathinfo, '/')); if(!isset($parseUrl['path']))return $_old_url; $path = trim($parseUrl['path'], '/'); if (isset($parseUrl['query'])) { parse_str($parseUrl['query'], $query); $args = array_merge($query, $args); } $gets = array(); if (is_array($args)) { foreach ($args as $n => $q) { array_push($gets, $n); array_push($gets, $q); } } $vars = explode("/", $path); $urlType = C("URL_TYPE"); switch ($urlType) { case 1: $root = $web . '/'; break; case 2: default: $root = $web . '?'; break; } $set_app_group = false; if (defined("GROUP_PATH")) { $set_app_group = true; } $data = array(); switch (count($vars)) { case 2: if ($set_app_group) { $data[] = C("VAR_APP"); $data[] = APP; } $data[] = C("VAR_CONTROL"); $data[] = array_shift($vars); $data[] = C("VAR_METHOD"); $data[] = array_shift($vars); break; case 1: if ($set_app_group) { $data[] = C("VAR_APP"); $data[] = APP; } $data[] = C("VAR_CONTROL"); $data[] = CONTROL; $data[] = C("VAR_METHOD"); $data[] = array_shift($vars); break; default: $data[] = C("VAR_APP"); $data[] = array_shift($vars); $data[] = C("VAR_CONTROL"); $data[] = array_shift($vars); $data[] = C("VAR_METHOD"); $data[] = array_shift($vars); if (is_array($vars)) { foreach ($vars as $v) { $data[] = $v; } } } $varsAll = array_merge($data, $gets); $url = ''; switch ($urlType) { case 1: foreach ($varsAll as $value) { $url .= C('PATHINFO_Dli') . $value; } $url = str_replace(array("/" . C("VAR_APP") . "/", "/" . C("VAR_CONTROL") . "/", "/" . C("VAR_METHOD") . "/"), "/", $url); $url = substr($url, 1); break; case 2: default: foreach ($varsAll as $k => $value) { if ($k % 2) { $url .= '=' . $value; } else { $url .= '&' . $value; } } $url = substr($url, 1); break; } $pathinfo_html = $urlType == 1 ? C("PATHINFO_HTML") : ''; if (C("URL_REWRITE")) { $root = preg_replace('/\w+?\.php(\/|\?)?/i', '', $root); } return $root . Route::toUrl($url) . $pathinfo_html; } function alias_import($name = null, $path = null) { static $_alias = array(); if (is_null($name)){ return $_alias; } if (is_string($name)){ $name = strtolower($name); } if (is_array($name)) { $_alias = array_merge($_alias, array_change_key_case($name)); return true; } elseif (!is_null($path)) { return $_alias[$name] = $path; } elseif (isset($_alias[$name])) { return require_cache($_alias[$name]); } return false; } function require_cache($path = null) { static $_files = array(); if (is_null($path)) return $_files; if (isset($_files[$path])) { return true; } if (!file_exists_case($path)) { return false; } require($path); $_files[$path] = true; return true; } function file_exists_case($file) { if (is_file($file)) { if (IS_WIN && C("CHECK_FILE_CASE")) { if (basename(realpath($file)) != basename($file)) { return false; } } return true; } return false; } function array_change_key_case_d($arr, $type = 0) { $function = $type ? 'strtoupper' : 'strtolower'; $newArr = array(); if (!is_array($arr) || empty($arr)){ return $newArr; } foreach ($arr as $k => $v) { $k = $function($k); if (is_array($v)) { $newArr[$k] = array_change_key_case_d($v, $type); } else { $newArr[$k] = $v; } } return $newArr; } function require_array($fileArr) { foreach ($fileArr as $file) { if (is_file($file) && require_cache($file)) return true; } return false; } function trace($value = '[ZHPHP]', $level = 'DEBUG', $record = false) { static $_trace = array(); if ('[ZHPHP]' === $value) { return $_trace; } else { $info = ' : ' . print_r($value, true); if (DEBUG && 'ERROR' == $level) { throw_exception($info); } if (!isset($_trace[$level])) { $_trace[$level] = array(); } $_trace[$level][] = $info; if (IS_AJAX || $record) { Log::record($info, $level, $record); } } } function FriendlyErrorType($type) { switch ($type) { case E_ERROR: return 'E_ERROR'; case E_WARNING: return 'E_WARNING'; case E_PARSE: return 'E_PARSE'; case E_NOTICE: return 'E_NOTICE'; case E_CORE_ERROR: return 'E_CORE_ERROR'; case E_CORE_WARNING: return 'E_CORE_WARNING'; case E_CORE_ERROR: return 'E_COMPILE_ERROR'; case E_CORE_WARNING: return 'E_COMPILE_WARNING'; case E_USER_ERROR: return 'E_USER_ERROR'; case E_USER_WARNING: return 'E_USER_WARNING'; case E_USER_NOTICE: return 'E_USER_NOTICE'; case E_STRICT: return 'E_STRICT'; case E_RECOVERABLE_ERROR: return 'E_RECOVERABLE_ERROR'; case E_DEPRECATED: return 'E_DEPRECATED'; case E_USER_DEPRECATED: return 'E_USER_DEPRECATED'; } return $type; } function dir_create($dirName, $auth = 0755) { $dirName = str_replace("\\", "/", $dirName); $dirPath = rtrim($dirName, '/'); if (is_dir($dirPath)) return true; $dirs = explode('/', $dirPath); $dir = ''; foreach ($dirs as $v) { $dir .= $v . '/'; is_dir($dir) or @mkdir($dir, $auth, true); } return is_dir($dirPath); } function halt($error){ $e = array(); if (DEBUG) { if (!is_array($error)) { $trace = debug_backtrace(); $e['message'] = $error; $e['file'] = $trace[0]['file']; $e['line'] = $trace[0]['line']; $e['class'] = isset($trace[0]['class']) ? $trace[0]['class'] : ""; $e['function'] = isset($trace[0]['function']) ? $trace[0]['function'] : ""; ob_start(); debug_print_backtrace(); $e['trace'] = htmlspecialchars(ob_get_clean()); } else { $e = $error; } }else { if ($_url = C('ERROR_URL')) { go($_url); } else { $e['message'] = C('ERROR_MESSAGE'); } } require ZHPHP_TPL_PATH . 'halt.html'; exit; } function _404($msg = "", $url = "") { DEBUG && halt($msg); Log::write($msg); if (empty($url) or C("404_URL")) { $url = C("404_URL"); } if ($url) go($url); else set_http_state(404); exit; } function error($error) { halt($error); } function compress($content){ $str = ""; $data = token_get_all($content); $end = false; for ($i = 0, $count = count($data); $i < $count; $i++) { if (is_string($data[$i])) { $end = false; $str .= $data[$i]; } else { switch ($data[$i][0]) { case T_COMMENT: case T_DOC_COMMENT: break; case T_WHITESPACE: if (!$end) { $end = true; $str .= " "; } break; case T_START_HEREDOC: $str .= "<<<HDPHP\n"; break; case T_END_HEREDOC: $str .= "HDPHP;\n"; for ($m = $i + 1; $m < $count; $m++) { if (is_string($data[$m]) && $data[$m] == ';') { $i = $m; break; } if ($data[$m] == T_CLOSE_TAG) { break; } } break; default: $end = false; $str .= $data[$i][1]; } } } return $str; } function md5_d($var) { return md5(serialize($var)); } function log_write($error) { $trace = debug_backtrace(); $e['message'] = $error; $e['file'] = $trace[0]['file']; $e['line'] = $trace[0]['line']; $e['class'] = isset($trace[0]['class']) ? $trace[0]['class'] : ""; $e['function'] = isset($trace[0]['function']) ? $trace[0]['function'] : ""; $msg = ("[Error]" . $e['message'] . " [Time]" . date("y-m-d h:i") . " [File]" . $e['file'] . " [Line]" . $e['line']); Log::write($msg); } function throw_exception($msg, $type = "ZhException", $code = 0) { if (class_exists($type, false)) { throw new $type($msg, $code, true); } else { halt($msg); } } function get_size($size, $decimals = 2) { switch (true) { case $size >= pow(1024, 3): return round($size / pow(1024, 3), $decimals) . " GB"; case $size >= pow(1024, 2): return round($size / pow(1024, 2), $decimals) . " MB"; case $size >= pow(1024, 1): return round($size / pow(1024, 1), $decimals) . " KB"; default: return $size . 'B'; } } function tag($tag, $attr = array(), $content = "") { $tag = "_" . $tag; $tagClass = array(); $tags = C('TPL_TAGS'); if (!empty($tags) && is_array($tags)) { foreach ($tags as $k) { $arr = explode('.', $k); if (import($k)) { $tagClass[] = array_pop($arr); } } } $tagClass[] = 'ViewTag'; foreach ($tagClass as $_class) { $obj = new $_class; if (method_exists($obj, $tag)) { return $obj->$tag($attr, $content); } } return false; } function extension_exists($ext) { $ext = strtolower($ext); $loaded_extensions = get_loaded_extensions(); return in_array($ext, array_change_value_case($loaded_extensions, 0)); } function array_change_value_case($arr, $type = 0) { $function = $type ? 'strtoupper' : 'strtolower'; $newArr = array(); foreach ($arr as $k => $v) { if (is_array($v)) { $newArr[$k] = array_change_value_case($v, $type); } else { $newArr[$k] = $function($v); } } return $newArr; }function ec_sub_str($str, $length = 0, $append = true) { $str = trim($str); $strlength = strlen($str); if ($length == 0 || $length >= $strlength) { return $str; } elseif ($length < 0) { $length = $strlength + $length; if ($length < 0) { $length = $strlength; } } if (function_exists('mb_substr')) { $newstr = mb_substr($str, 0, $length, C('CHARSET')); } elseif (function_exists('iconv_substr')) { $newstr = iconv_substr($str, 0, $length, C('CHARSET')); } else { $newstr = substr($str, 0, $length); } if ($append && $str != $newstr) { $newstr .= '...'; } return $newstr; } function move_upload_file($file_name, $target_name = '') { if (function_exists("move_uploaded_file")) { if (move_uploaded_file($file_name, $target_name)) { @chmod($target_name,0755); return true; } else if (copy($file_name, $target_name)) { @chmod($target_name,0755); return true; } } elseif (copy($file_name, $target_name)) { @chmod($target_name,0755); return true; } return false; } function make_dir($folder) { $reval = false; if (!file_exists($folder)) { @umask(0); preg_match_all('/([^\/]*)\/?/i', $folder, $atmp); $base = ($atmp[0][0] == '/') ? '/' : ''; foreach ($atmp[1] AS $val) { if ('' != $val) { $base .= $val; if ('..' == $val || '.' == $val) { $base .= '/'; continue; } } else { continue; } $base .= '/'; if (!file_exists($base)) { if (@mkdir(rtrim($base, '/'), 0777)) { @chmod($base, 0777); $reval = true; } } } } else { $reval = is_dir($folder); } clearstatcache(); return $reval; } function check_file_type($filename, $realname = '', $limit_ext_types = '') { if ($realname) { $extname = strtolower(substr($realname, strrpos($realname, '.') + 1)); } else { $extname = strtolower(substr($filename, strrpos($filename, '.') + 1)); } if ($limit_ext_types && stristr($limit_ext_types, '|' . $extname . '|') === false) { return ''; } $str = $format = ''; $file = @fopen($filename, 'rb'); if ($file) { $str = @fread($file, 0x400); @fclose($file); } else { if (stristr($filename, ROOT_PATH) === false) { if ($extname == 'jpg' || $extname == 'jpeg' || $extname == 'gif' || $extname == 'png' || $extname == 'doc' || $extname == 'xls' || $extname == 'txt' || $extname == 'zip' || $extname == 'rar' || $extname == 'ppt' || $extname == 'pdf' || $extname == 'rm' || $extname == 'mid' || $extname == 'wav' || $extname == 'bmp' || $extname == 'swf' || $extname == 'chm' || $extname == 'sql' || $extname == 'cert'|| $extname == 'pptx' || $extname == 'xlsx' || $extname == 'docx') { $format = $extname; } } else { return ''; } } if ($format == '' && strlen($str) >= 2 ) { if (substr($str, 0, 4) == 'MThd' && $extname != 'txt') { $format = 'mid'; } elseif (substr($str, 0, 4) == 'RIFF' && $extname == 'wav') { $format = 'wav'; } elseif (substr($str ,0, 3) == "\xFF\xD8\xFF") { $format = 'jpg'; } elseif (substr($str ,0, 4) == 'GIF8' && $extname != 'txt') { $format = 'gif'; } elseif (substr($str ,0, 8) == "\x89\x50\x4E\x47\x0D\x0A\x1A\x0A") { $format = 'png'; } elseif (substr($str ,0, 2) == 'BM' && $extname != 'txt') { $format = 'bmp'; } elseif ((substr($str ,0, 3) == 'CWS' || substr($str ,0, 3) == 'FWS') && $extname != 'txt') { $format = 'swf'; } elseif (substr($str ,0, 4) == "\xD0\xCF\x11\xE0") { if (substr($str,0x200,4) == "\xEC\xA5\xC1\x00" || $extname == 'doc') { $format = 'doc'; } elseif (substr($str,0x200,2) == "\x09\x08" || $extname == 'xls') { $format = 'xls'; } elseif (substr($str,0x200,4) == "\xFD\xFF\xFF\xFF" || $extname == 'ppt') { $format = 'ppt'; } } elseif (substr($str ,0, 4) == "PK\x03\x04") { if (substr($str,0x200,4) == "\xEC\xA5\xC1\x00" || $extname == 'docx') { $format = 'docx'; } elseif (substr($str,0x200,2) == "\x09\x08" || $extname == 'xlsx') { $format = 'xlsx'; } elseif (substr($str,0x200,4) == "\xFD\xFF\xFF\xFF" || $extname == 'pptx') { $format = 'pptx'; }else { $format = 'zip'; } } elseif (substr($str ,0, 4) == 'Rar!' && $extname != 'txt') { $format = 'rar'; } elseif (substr($str ,0, 4) == "\x25PDF") { $format = 'pdf'; } elseif (substr($str ,0, 3) == "\x30\x82\x0A") { $format = 'cert'; } elseif (substr($str ,0, 4) == 'ITSF' && $extname != 'txt') { $format = 'chm'; } elseif (substr($str ,0, 4) == "\x2ERMF") { $format = 'rm'; } elseif ($extname == 'sql') { $format = 'sql'; } elseif ($extname == 'txt') { $format = 'txt'; } } if ($limit_ext_types && stristr($limit_ext_types, '|' . $format . '|') === false) { $format = ''; } return $format; } function ecs_iconv($source_lang, $target_lang, $source_string = '') { static $chs = NULL; if ($source_lang == $target_lang || $source_string == '' || preg_match("/[\x80-\xFF]+/", $source_string) == 0) { return $source_string; } if ($chs === NULL) { $chs = new Chinese(ROOT_PATH); } return $chs->Convert($source_lang, $target_lang, $source_string); } function json_str_iconv($str) { if (EC_CHARSET != 'utf-8') { if (is_string($str)) { return addslashes(stripslashes(ecs_iconv('utf-8', EC_CHARSET, $str))); } elseif (is_array($str)) { foreach ($str as $key => $value) { $str[$key] = json_str_iconv($value); } return $str; } elseif (is_object($str)) { foreach ($str as $key => $value) { $str->$key = json_str_iconv($value); } return $str; } else { return $str; } } return $str; } function mysql_like_quote($str) { return strtr($str, array("\\\\" => "\\\\\\\\", '_' => '\_', '%' => '\%', "\'" => "\\\\\'")); } function gd_version() { $image = new EcImage(C('bgcolor')); return $image->gd_version(); } function addslashes_deep($value) { if (empty($value)) { return $value; } else { return is_array($value) ? array_map('addslashes_deep', $value) : addslashes($value); } } function addslashes_deep_obj($obj) { if (is_object($obj) == true) { foreach ($obj AS $key => $val) { $obj->$key = addslashes_deep($val); } } else { $obj = addslashes_deep($obj); } return $obj; }function get_brands($cat = 0, $app = 'brand') { $db_prefix=C("DB_PREFIX"); global $page_libs; $template =CONTROL; $template =strtolower($template); static $static_page_libs = null; include_once(ROOT_PATH . '/includes/ECTemplate.php'); if ($static_page_libs == null) { $static_page_libs = $page_libs; } $children = ($cat > 0) ? ' AND ' . get_children($cat) : ''; $sql = "SELECT 
                b.brand_id, b.brand_name, b.brand_logo, b.brand_desc, COUNT(*) AS goods_num, 
                IF(b.brand_logo > '', '1', '0') AS tag ". "FROM " . $db_prefix.'brand' . "AS b, ". $db_prefix.'goods' . " AS g ". "WHERE 
                g.brand_id = b.brand_id $children AND is_show = 1 " . " AND g.is_on_sale = 1 AND g.is_alone_sale = 1 AND g.is_delete = 0 ". "GROUP BY b.brand_id HAVING goods_num > 0 ORDER BY tag DESC, b.sort_order ASC"; if (isset($static_page_libs[$template]['/library/brands.lbi'])) { $num = get_library_number("brands"); $sql .= " LIMIT $num "; } } function get_promotion_info($goods_id = '') { $db_prefix=C("DB_PREFIX"); $snatch = array(); $group = array(); $auction = array(); $package = array(); $favourable = array(); $gmtime = gmtime(); $sql = 'SELECT 
            act_id, 
            act_name, 
            act_type, 
            start_time, 
            end_time 
            FROM ' . $db_prefix.'goods_activity' . " 
            WHERE 
                is_finished=0 AND 
                start_time <= '$gmtime' AND 
                end_time >= '$gmtime'"; if(!empty($goods_id)) { $sql .= " AND goods_id = '$goods_id'"; } $res = M()->getAll($sql); if(!empty($res)){ foreach ($res as $data) { switch ($data['act_type']) { case GAT_SNATCH: $snatch[$data['act_id']]['act_name'] = $data['act_name']; $snatch[$data['act_id']]['url'] = ec_build_uri('snatch', array('sid' => $data['act_id'])); $snatch[$data['act_id']]['time'] = sprintf('的时间为%s到%s，赶快来抢吧！', local_date('Y-m-d', $data['start_time']), local_date('Y-m-d', $data['end_time'])); $snatch[$data['act_id']]['sort'] = $data['start_time']; $snatch[$data['act_id']]['type'] = 'snatch'; break; case GAT_GROUP_BUY: $group[$data['act_id']]['act_name'] = $data['act_name']; $group[$data['act_id']]['url'] = ec_build_uri('group_buy', array('gbid' => $data['act_id'])); $group[$data['act_id']]['time'] = sprintf('的时间为%s到%s，赶快来抢吧！', local_date('Y-m-d', $data['start_time']), local_date('Y-m-d', $data['end_time'])); $group[$data['act_id']]['sort'] = $data['start_time']; $group[$data['act_id']]['type'] = 'group_buy'; break; case GAT_AUCTION: $auction[$data['act_id']]['act_name'] = $data['act_name']; $auction[$data['act_id']]['url'] = ec_build_uri('auction', array('auid' => $data['act_id'])); $auction[$data['act_id']]['time'] = sprintf('的时间为%s到%s，赶快来抢吧！', local_date('Y-m-d', $data['start_time']), local_date('Y-m-d', $data['end_time'])); $auction[$data['act_id']]['sort'] = $data['start_time']; $auction[$data['act_id']]['type'] = 'auction'; break; case GAT_PACKAGE: $package[$data['act_id']]['act_name'] = $data['act_name']; $package[$data['act_id']]['url'] = 'package.php#' . $data['act_id']; $package[$data['act_id']]['time'] = sprintf('的时间为%s到%s，赶快来抢吧！', local_date('Y-m-d', $data['start_time']), local_date('Y-m-d', $data['end_time'])); $package[$data['act_id']]['sort'] = $data['start_time']; $package[$data['act_id']]['type'] = 'package'; break; } } } $user_rank = ',' . $_SESSION['user_rank'] . ','; $favourable = array(); $sql = 'SELECT 
                act_id, act_range, act_range_ext, act_name, start_time, end_time 
            FROM ' . $db_prefix.'favourable_activity' . " 
            WHERE 
                start_time <= '$gmtime' AND end_time >= '$gmtime'"; if(!empty($goods_id)) { $sql .= " AND CONCAT(',', user_rank, ',') LIKE '%" . $user_rank . "%'"; } $res = M()->getAll($sql); if(empty($goods_id)) { if(!empty($res)){ foreach ($res as $rows) { $favourable[$rows['act_id']]['act_name'] = $rows['act_name']; $favourable[$rows['act_id']]['url'] = 'activity.php'; $favourable[$rows['act_id']]['time'] = sprintf('的时间为%s到%s，赶快来抢吧！', local_date('Y-m-d', $rows['start_time']), local_date('Y-m-d', $rows['end_time'])); $favourable[$rows['act_id']]['sort'] = $rows['start_time']; $favourable[$rows['act_id']]['type'] = 'favourable'; } } }else{ echo __FILE__.'-----'.__METHOD__; $sql = "SELECT cat_id, brand_id FROM " . $db_prefix.'goods' . " WHERE goods_id = '$goods_id'"; $row = M()->getRowSql($sql); $category_id = $row['cat_id']; $brand_id = $row['brand_id']; if(!empty($res)){ if ($rows['act_range'] == FAR_ALL) { $favourable[$rows['act_id']]['act_name'] = $rows['act_name']; $favourable[$rows['act_id']]['url'] = 'activity.php'; $favourable[$rows['act_id']]['time'] = sprintf('的时间为%s到%s，赶快来抢吧！', local_date('Y-m-d', $rows['start_time']), local_date('Y-m-d', $rows['end_time'])); $favourable[$rows['act_id']]['sort'] = $rows['start_time']; $favourable[$rows['act_id']]['type'] = 'favourable'; }elseif ($rows['act_range'] == FAR_CATEGORY) { } } } $sort_time = array(); $arr = array_merge($snatch, $group, $auction, $package, $favourable); foreach($arr as $key => $value) { $sort_time[] = $value['sort']; } array_multisort($sort_time, SORT_NUMERIC, SORT_DESC, $arr); return $arr; } function get_image_path($goods_id, $image='', $thumb=false, $call='goods', $del=false) { $url = empty($image) ? C('NO_PICTURE') : $image; return $url; } function get_article_children ($cat = 0) { return db_create_in(array_unique(array_merge(array($cat), array_keys(article_cat_list($cat, 0, false)))), 'cat_id'); } function article_cat_list($cat_id = 0, $selected = 0, $re_type = true, $level = 0) { static $res = NULL; $db_prefix=C("DB_PREFIX"); if ($res === NULL) { $data = cache('art_cat_pid_releate'); if ($data === NULL) { $sql = "SELECT 
                        c.*, 
                        COUNT(s.cat_id) AS has_children, 
                        COUNT(a.article_id) AS aricle_num ". ' FROM ' . $db_prefix.'article_cat' . " AS c". " LEFT JOIN " . $db_prefix.'article_cat' . " AS s ON s.parent_id=c.cat_id". " LEFT JOIN " . $db_prefix.'article' . " AS a ON a.cat_id=c.cat_id". " GROUP BY c.cat_id ". " ORDER BY parent_id, sort_order ASC"; $res = M()->getAll($sql); cache("art_cat_pid_releate", $res); } else { $res = $data; } } if (empty($res) == true) { return $re_type ? '' : array(); } $options = article_cat_options($cat_id, $res); if ($level > 0) { if ($cat_id == 0) { $end_level = $level; } else { $first_item = reset($options); $end_level = $first_item['level'] + $level; } foreach ($options AS $key => $val) { if ($val['level'] >= $end_level) { unset($options[$key]); } } } $pre_key = 0; foreach ($options AS $key => $value) { $options[$key]['has_children'] = 1; if ($pre_key > 0) { if ($options[$pre_key]['cat_id'] == $options[$key]['parent_id']) { $options[$pre_key]['has_children'] = 1; } } $pre_key = $key; } if ($re_type == true) { $select = ''; foreach ($options AS $var) { $select .= '<option value="' . $var['cat_id'] . '" '; $select .= ' cat_type="' . $var['cat_type'] . '" '; $select .= ($selected == $var['cat_id']) ? "selected='ture'" : ''; $select .= '>'; if ($var['level'] > 0) { $select .= str_repeat('&nbsp;', $var['level'] * 4); } $select .= htmlspecialchars(addslashes($var['cat_name'])) . '</option>'; } return $select; } else { foreach ($options AS $key => $value) { $options[$key]['url'] = ec_build_uri('article_cat', array('acid' => $value['cat_id']), $value['cat_name']); } return $options; } } function article_cat_options($spec_cat_id, $arr) { static $cat_options = array(); if (isset($cat_options[$spec_cat_id])) { return $cat_options[$spec_cat_id]; } if (!isset($cat_options[0])) { $level = $last_cat_id = 0; $options = $cat_id_array = $level_array = array(); while (!empty($arr)) { foreach ($arr AS $key => $value) { $cat_id = $value['cat_id']; if ($level == 0 && $last_cat_id == 0) { if ($value['parent_id'] > 0) { break; } $options[$cat_id] = $value; $options[$cat_id]['level'] = $level; $options[$cat_id]['id'] = $cat_id; $options[$cat_id]['name'] = $value['cat_name']; unset($arr[$key]); if ($value['has_children'] == 0) { continue; } $last_cat_id = $cat_id; $cat_id_array = array($cat_id); $level_array[$last_cat_id] = ++$level; continue; } if ($value['parent_id'] == $last_cat_id) { $options[$cat_id] = $value; $options[$cat_id]['level'] = $level; $options[$cat_id]['id'] = $cat_id; $options[$cat_id]['name'] = $value['cat_name']; unset($arr[$key]); if ($value['has_children'] > 0) { if (end($cat_id_array) != $last_cat_id) { $cat_id_array[] = $last_cat_id; } $last_cat_id = $cat_id; $cat_id_array[] = $cat_id; $level_array[$last_cat_id] = ++$level; } } elseif ($value['parent_id'] > $last_cat_id) { break; } } $count = count($cat_id_array); if ($count > 1) { $last_cat_id = array_pop($cat_id_array); } elseif ($count == 1) { if ($last_cat_id != end($cat_id_array)) { $last_cat_id = end($cat_id_array); } else { $level = 0; $last_cat_id = 0; $cat_id_array = array(); continue; } } if ($last_cat_id && isset($level_array[$last_cat_id])) { $level = $level_array[$last_cat_id]; } else { $level = 0; } } $cat_options[0] = $options; } else { $options = $cat_options[0]; } if (!$spec_cat_id) { return $options; } else { if (empty($options[$spec_cat_id])) { return array(); } $spec_cat_id_level = $options[$spec_cat_id]['level']; foreach ($options AS $key => $value) { if ($key != $spec_cat_id) { unset($options[$key]); } else { break; } } $spec_cat_id_array = array(); foreach ($options AS $key => $value) { if (($spec_cat_id_level == $value['level'] && $value['cat_id'] != $spec_cat_id) || ($spec_cat_id_level > $value['level'])) { break; } else { $spec_cat_id_array[$key] = $value; } } $cat_options[$spec_cat_id] = $spec_cat_id_array; return $spec_cat_id_array; } } function price_format($price, $change_price = true) { if($price==='') { $price=0; } if ($change_price) { switch (C('PRICE_FORMAT')) { case 0: $price = number_format($price, 2, '.', ''); break; case 1: $price = preg_replace('/(.*)(\\.)([0-9]*?)0+$/', '\1\2\3', number_format($price, 2, '.', '')); if (substr($price, -1) == '.') { $price = substr($price, 0, -1); } break; case 2: $price = substr(number_format($price, 2, '.', ''), 0, -1); break; case 3: $price = intval($price); break; case 4: $price = number_format($price, 1, '.', ''); break; case 5: $price = round($price); break; } }else { $price = number_format($price, 2, '.', ''); } return sprintf(C('CURRENCY_FORMAT'), $price); } function get_children($cat = 0) { $goodsCategoryModel=K("GoodsCategory"); $cat_list=$goodsCategoryModel->cat_list($cat,0,false); return 'g.cat_id ' . db_create_in(array_unique(array_merge(array($cat), array_keys($cat_list)))); } function db_create_in($item_list, $field_name = '') { if (empty($item_list)) { return $field_name . " IN ('') "; } else { if (!is_array($item_list)) { $item_list = explode(',', $item_list); } $item_list = array_unique($item_list); $item_list_tmp = ''; foreach ($item_list AS $item) { if ($item !== '') { $item_list_tmp .= $item_list_tmp ? ",'$item'" : "'$item'"; } } if (empty($item_list_tmp)) { return $field_name . " IN ('') "; } else { return $field_name . ' IN (' . $item_list_tmp . ') '; } } } function default_value($currentValue,$defaultValue){ return empty($currentValue)?$defaultValue:$currentValue; } function ec_build_uri($app, $params, $append = '', $page = 0, $keywords = '', $size = 0) { static $rewrite = NULL; if ($rewrite === NULL) { $rewrite = false; } $args = array('cid' => 0, 'gid' => 0, 'bid' => 0, 'acid' => 0, 'aid' => 0, 'sid' => 0, 'gbid' => 0, 'auid' => 0, 'sort' => '', 'order' => '', ); extract(array_merge($args, $params)); $uri = ''; switch ($app) { case 'category': if (empty($cid)) { return false; } else { if ($rewrite) { $uri = 'category-' . $cid; if (isset($bid)) { $uri .= '-b' . $bid; } if (isset($price_min)) { $uri .= '-min'.$price_min; } if (isset($price_max)) { $uri .= '-max'.$price_max; } if (isset($filter_attr)) { $uri .= '-attr' . $filter_attr; } if (!empty($page)) { $uri .= '-' . $page; } if (!empty($sort)) { $uri .= '-' . $sort; } if (!empty($order)) { $uri .= '-' . $order; } } else { $uri = 'category.php?id=' . $cid; if (!empty($bid)) { $uri .= '&amp;brand=' . $bid; } if (isset($price_min)) { $uri .= '&amp;price_min=' . $price_min; } if (isset($price_max)) { $uri .= '&amp;price_max=' . $price_max; } if (!empty($filter_attr)) { $uri .='&amp;filter_attr=' . $filter_attr; } if (!empty($page)) { $uri .= '&amp;page=' . $page; } if (!empty($sort)) { $uri .= '&amp;sort=' . $sort; } if (!empty($order)) { $uri .= '&amp;order=' . $order; } } } break; case 'goods': if (empty($gid)) { return false; } else { $uri = $rewrite ? 'goods-' . $gid : 'goods.php?id=' . $gid; } break; case 'brand': if (empty($bid)) { return false; } else { if ($rewrite) { $uri = 'brand-' . $bid; if (isset($cid)) { $uri .= '-c' . $cid; } if (!empty($page)) { $uri .= '-' . $page; } if (!empty($sort)) { $uri .= '-' . $sort; } if (!empty($order)) { $uri .= '-' . $order; } } else { $uri = 'brand.php?id=' . $bid; if (!empty($cid)) { $uri .= '&amp;cat=' . $cid; } if (!empty($page)) { $uri .= '&amp;page=' . $page; } if (!empty($sort)) { $uri .= '&amp;sort=' . $sort; } if (!empty($order)) { $uri .= '&amp;order=' . $order; } } } break; case 'article_cat': if (empty($acid)) { return false; } else { if ($rewrite) { $uri = 'article_cat-' . $acid; if (!empty($page)) { $uri .= '-' . $page; } if (!empty($sort)) { $uri .= '-' . $sort; } if (!empty($order)) { $uri .= '-' . $order; } if (!empty($keywords)) { $uri .= '-' . $keywords; } } else { $uri = 'article_cat.php?id=' . $acid; if (!empty($page)) { $uri .= '&amp;page=' . $page; } if (!empty($sort)) { $uri .= '&amp;sort=' . $sort; } if (!empty($order)) { $uri .= '&amp;order=' . $order; } if (!empty($keywords)) { $uri .= '&amp;keywords=' . $keywords; } } } break; case 'article': if (empty($aid)) { return false; } else { $uri = $rewrite ? 'article-' . $aid : 'article.php?id=' . $aid; } break; case 'group_buy': if (empty($gbid)) { return false; } else { $uri = $rewrite ? 'group_buy-' . $gbid : 'group_buy.php?act=view&amp;id=' . $gbid; } break; case 'auction': if (empty($auid)) { return false; } else { $uri = $rewrite ? 'auction-' . $auid : 'auction.php?act=view&amp;id=' . $auid; } break; case 'snatch': if (empty($sid)) { return false; } else { $uri = $rewrite ? 'snatch-' . $sid : 'snatch.php?id=' . $sid; } break; case 'search': break; case 'exchange': if ($rewrite) { $uri = 'exchange-' . $cid; if (isset($price_min)) { $uri .= '-min'.$price_min; } if (isset($price_max)) { $uri .= '-max'.$price_max; } if (!empty($page)) { $uri .= '-' . $page; } if (!empty($sort)) { $uri .= '-' . $sort; } if (!empty($order)) { $uri .= '-' . $order; } } else { $uri = 'exchange.php?cat_id=' . $cid; if (isset($price_min)) { $uri .= '&amp;integral_min=' . $price_min; } if (isset($price_max)) { $uri .= '&amp;integral_max=' . $price_max; } if (!empty($page)) { $uri .= '&amp;page=' . $page; } if (!empty($sort)) { $uri .= '&amp;sort=' . $sort; } if (!empty($order)) { $uri .= '&amp;order=' . $order; } } break; case 'exchange_goods': if (empty($gid)) { return false; } else { $uri = $rewrite ? 'exchange-id' . $gid : 'exchange.php?id=' . $gid . '&amp;act=view'; } break; default: return false; break; } if ($rewrite) { if ($rewrite == 2 && !empty($append)) { $uri .= '-' . urlencode(preg_replace('/[\.|\/|\?|&|\+|\\\|\'|"|,]+/', '', $append)); } $uri .= '.html'; } if (($rewrite == 2) && (strpos(strtolower(EC_CHARSET), 'utf') !== 0)) { $uri = urlencode($uri); } return $uri; }function insert_cart_info() { $db_prefix=C('DB_PREFIX'); $sql = 'SELECT SUM(goods_number) AS number, SUM(goods_price * goods_number) AS amount' . ' FROM ' . $db_prefix.'cart' . " WHERE session_id = '" . SESS_ID . "' AND rec_type = '" . CART_GENERAL_GOODS . "'"; $row = M()->GetRowSql($sql); $number=empty($row['number'])?0:intval($row['number']); $number=empty($row['amount'])?0:floatval($row['number']); $str = sprintf('您的购物车中有 %d 件商品，总计金额 %s。', $number, price_format($amount, false)); return '<a href="flow.php" title="' . '查看购物车' . '">' . $str . '</a>'; } function insert_vote() { $vote = get_vote(); $file = ROOT_PATH.'template/'.C('WEB_STYLE') . '/ec/library/vote.lbi'; $view = new ViewZh(); if (!empty($vote)) { $view->assign('vote_id', $vote['id']); $view->assign('vote', $vote['content']); } return $view->fetch($file); }function get_library_number($library, $template = null) { $db_prefix=C('DB_PREFIX'); global $page_libs; if (empty($template)) { $template =CONTROL; } $template = addslashes($template); static $lib_list = array(); p($lib_list);die; if (!isset($lib_list[$template])) { $lib_list[$template] = array(); $sql = "SELECT library, number FROM " . $db_prefix.'template' . " WHERE theme = '" . $GLOBALS['_CFG']['template'] . "'" . " AND filename = '$template' AND remarks='' "; } echo $template;die; } function get_vote($id = '') { $db_prefix=C('DB_PREFIX'); if (empty($id)) { $time = gmtime(); $sql = 'SELECT vote_id, vote_name, can_multi, vote_count, RAND() AS rnd' . ' FROM ' . $db_prefix.'vote' . " WHERE start_time <= '$time' AND end_time >= '$time' ". ' ORDER BY rnd LIMIT 1'; } else { $sql = 'SELECT vote_id, vote_name, can_multi, vote_count' . ' FROM ' . $db_prefix.'vote'. " WHERE vote_id = '$id'"; } $vote_arr = M()->getRowSql($sql); if ($vote_arr !== false && !empty($vote_arr)) { $sql_option = 'SELECT v.*, o.option_id, o.vote_id, o.option_name, o.option_count ' . 'FROM ' . $db_prefix.'vote' . ' AS v, ' . $db_prefix.'vote_option' . ' AS o ' . "WHERE 
                      o.vote_id = v.vote_id AND 
                      o.vote_id = '$vote_arr[vote_id]' ORDER BY o.option_order ASC, o.option_id DESC"; $res = M()->getAll($sql_option); $sql = 'SELECT SUM(option_count) AS all_option FROM ' . $db_prefix.'vote_option' . " WHERE vote_id = '" . $vote_arr['vote_id'] . "' GROUP BY vote_id"; $option_num = M()->getOne($sql,'all_option'); $arr = array(); $count = 100; foreach ($res AS $idx => $row) { if ($option_num > 0 && $idx == count($res) - 1) { $percent = $count; }else { $percent = ($row['vote_count'] > 0 && $option_num > 0) ? round(($row['option_count'] / $option_num) * 100) : 0; $count -= $percent; } $arr[$row['vote_id']]['options'][$row['option_id']]['percent'] = $percent; $arr[$row['vote_id']]['vote_id'] = $row['vote_id']; $arr[$row['vote_id']]['vote_name'] = $row['vote_name']; $arr[$row['vote_id']]['can_multi'] = $row['can_multi']; $arr[$row['vote_id']]['vote_count'] = $row['vote_count']; $arr[$row['vote_id']]['options'][$row['option_id']]['option_id'] = $row['option_id']; $arr[$row['vote_id']]['options'][$row['option_id']]['option_name'] = $row['option_name']; $arr[$row['vote_id']]['options'][$row['option_id']]['option_count'] = $row['option_count']; } $vote_arr['vote_id'] = (!empty($vote_arr['vote_id'])) ? $vote_arr['vote_id'] : ''; $vote = array('id' => $vote_arr['vote_id'], 'content' => $arr); return $vote; } } function set_filter($filter, $sql, $param_str = '') { $filterfile = basename(PHP_SELF, '.php'); if ($param_str) { $filterfile .= $param_str; } setcookie('ZHCMS[lastfilterfile]', sprintf('%X', crc32($filterfile)), time() + 600); setcookie('ZHCMS[lastfilter]', urlencode(serialize($filter)), time() + 600); setcookie('ZHCMS[lastfiltersql]', base64_encode($sql), time() + 600); } function get_filter($param_str = '') { $filterfile = basename(PHP_SELF, '.php'); if ($param_str) { $filterfile .= $param_str; } echo sprintf('%X', crc32($filterfile)); if (isset($_GET['uselastfilter']) && isset($_COOKIE['ZHCMS']['lastfilterfile']) && $_COOKIE['ZHCMS']['lastfilterfile'] == sprintf('%X', crc32($filterfile))) { return array( 'filter' => unserialize(urldecode($_COOKIE['ZHCMS']['lastfilter'])), 'sql' => base64_decode($_COOKIE['ZHCMS']['lastfiltersql']) ); } else { return false; } } function assign_template($controller,$ctype = '', $catlist = array()) { $controller->assign('navigator_list', get_navigator($ctype, $catlist)); } function get_navigator($ctype = '', $catlist = array()) { $db_prefix=C('DB_PREFIX'); $sql = 'SELECT * FROM '. $db_prefix.'nav' . '
            WHERE ifshow = \'1\' ORDER BY type, vieworder'; $res = M()->query($sql); $cur_url = substr(strrchr($_SERVER['REQUEST_URI'],'/'),1); if (0) { echo 'TODO:get_navigator的rewrote的功能没有测试'; if(strpos($cur_url, '-')) { preg_match('/([a-z]*)-([0-9]*)/',$cur_url,$matches); $cur_url = $matches[1].'.php?id='.$matches[2]; } } else { $cur_url = substr(strrchr($_SERVER['REQUEST_URI'],'/'),1); } $noindex = false; $active = 0; $navlist = array( 'top' => array(), 'middle' => array(), 'bottom' => array() ); foreach($res as $key => $val){ $navlist[$val['type']][] = array( 'name' => $val['name'], 'opennew' => $val['opennew'], 'url' => $val['url'], 'ctype' => $val['ctype'], 'cid' => $val['cid'], ); } foreach($navlist['middle'] as $k=>$v) { if(empty($ctype)){ $condition=(strpos($cur_url, $v['url']) === 0) ; }else{ $condition=(strpos($cur_url, $v['url']) === 0 && strlen($cur_url) == strlen($v['url'])); } if ($condition) { $navlist['middle'][$k]['active'] = 1; $noindex = true; $active += 1; } } if(!empty($ctype) && $active < 1) { foreach($catlist as $key => $val) { foreach($navlist['middle'] as $k=>$v) { if(!empty($v['ctype']) && $v['ctype'] == $ctype && $v['cid'] == $val && $active < 1) { $navlist['middle'][$k]['active'] = 1; $noindex = true; $active += 1; } } } } if ($noindex == false) { $navlist['config']['index'] = 1; } return $navlist; } function get_user_info($id=0) { $db_prefix=C('DB_PREFIX'); if ($id == 0) { $id = $_SESSION['uid']; } $time = date('Y-m-d'); $sql = 'SELECT u.uid, u.email, u.username, u.user_money, u.pay_points'. ' FROM ' .$db_prefix.'user'. ' AS u ' . " WHERE u.user_id = '$id'"; $user = M()->getRowSql($sql); $bonus = get_user_bonus($id); $user['username'] = $user['username']; $user['user_points'] = $user['pay_points'] . $GLOBALS['_CFG']['integral_name']; $user['user_money'] = price_format($user['user_money'], false); $user['user_bonus'] = price_format($bonus['bonus_value'], false); return $user; } function get_user_bonus($user_id = 0) { $db_prefix=C('DB_PREFIX'); if ($user_id == 0) { $user_id = $_SESSION['uid']; } $sql = "SELECT SUM(bt.type_money) AS bonus_value, COUNT(*) AS bonus_count ". "FROM " .$db_prefix.'user_bonus'. " AS ub, ". $db_prefix.'bonus_type' . " AS bt ". "WHERE ub.user_id = '$user_id' AND ub.bonus_type_id = bt.type_id AND ub.order_id = 0"; $row = M()->getRowSql($sql); return $row; } function update_user_info() { $db_prefix=C('DB_PREFIX'); if (!isset($_SESSION['uid']) || !$_SESSION['uid']) { return false; } echo __FILE__.'update_user_info';die; $time = date('Y-m-d'); $sql = 'SELECT u.user_money,u.email, u.pay_points, u.user_rank, u.rank_points, '. ' IFNULL(b.type_money, 0) AS user_bonus, u.last_login, u.last_ip'. ' FROM ' .$db_prefix.'user'. ' AS u ' . ' LEFT JOIN ' .$db_prefix.'user_bonus'. ' AS ub'. ' ON ub.user_id = u.uid AND ub.used_time = 0 ' . ' LEFT JOIN ' .$db_prefix.'bonus_type'. ' AS b'. " ON b.type_id = ub.bonus_type_id AND b.use_start_date <= '$time' AND b.use_end_date >= '$time' ". " WHERE u.user_id = '$_SESSION[uid]'"; } function list_link_postfix() { return 'uselastfilter=1'; } function get_where_sql($filter) { $time = date('Y-m-d'); $where = isset($filter->is_delete) && $filter->is_delete == '1' ? ' WHERE is_delete = 1 ' : ' WHERE is_delete = 0 '; $where .= (isset($filter->real_goods) && ($filter->real_goods > -1)) ? ' AND is_real = ' . intval($filter->real_goods) : ''; $where .= isset($filter->cat_id) && $filter->cat_id > 0 ? ' AND ' . get_children($filter->cat_id) : ''; $where .= isset($filter->brand_id) && $filter->brand_id > 0 ? " AND brand_id = '" . $filter->brand_id . "'" : ''; $where .= isset($filter->intro_type) && $filter->intro_type != '0' ? ' AND ' . $filter->intro_type . " = '1'" : ''; $where .= isset($filter->intro_type) && $filter->intro_type == 'is_promote' ? " AND promote_start_date <= '$time' AND promote_end_date >= '$time' " : ''; $where .= isset($filter->keyword) && trim($filter->keyword) != '' ? " AND (goods_name LIKE '%" . mysql_like_quote($filter->keyword) . "%' OR goods_sn LIKE '%" . mysql_like_quote($filter->keyword) . "%' OR goods_id LIKE '%" . mysql_like_quote($filter->keyword) . "%') " : ''; $where .= isset($filter->suppliers_id) && trim($filter->suppliers_id) != '' ? " AND (suppliers_id = '" . $filter->suppliers_id . "') " : ''; $where .= isset($filter->in_ids) ? ' AND goods_id ' . db_create_in($filter->in_ids) : ''; $where .= isset($filter->exclude) ? ' AND goods_id NOT ' . db_create_in($filter->exclude) : ''; $where .= isset($filter->stock_warning) ? ' AND goods_number <= warn_number' : ''; return $where; } function page_and_size($filter) { if (isset($_REQUEST['page_size']) && intval($_REQUEST['page_size']) > 0) { $filter['page_size'] = intval($_REQUEST['page_size']); } elseif (isset($_COOKIE['ZHCMS']['page_size']) && intval($_COOKIE['ZHCMS']['page_size']) > 0) { $filter['page_size'] = intval($_COOKIE['ZHCMS']['page_size']); } else { $filter['page_size'] = C('PAGE_SHOW_ROW'); } $filter['page'] = (empty($_REQUEST['page']) || intval($_REQUEST['page']) <= 0) ? 1 : intval($_REQUEST['page']); $filter['page_count'] = (!empty($filter['record_count']) && $filter['record_count'] > 0) ? ceil($filter['record_count'] / $filter['page_size']) : 1; if ($filter['page'] > $filter['page_count']) { $filter['page'] = $filter['page_count']; } $filter['start'] = ($filter['page'] - 1) * $filter['page_size']; return $filter; } function make_json_error($msg) { make_json_response('', 1, $msg); } function make_json_result($content, $message='', $append=array()) { make_json_response($content, 0, $message, $append); } function make_json_response($content='', $error="0", $message='', $append=array()) { $res = array('error' => $error, 'message' => $message, 'content' => $content); if (!empty($append)) { foreach ($append AS $key => $val) { $res[$key] = $val; } } $val = json_encode($res); exit($val); } function create_html_editor($input_name, $input_value = '') { $editor = new FCKeditor($input_name); $editor->BasePath = __ZHPHP_EXTEND__.'/Org/fckeditor/'; $editor->ToolbarSet = 'Normal'; $editor->Width = '100%'; $editor->Height = '320'; $editor->Value = $input_value; $FCKeditor = $editor->CreateHtml(); return $FCKeditor; }function gmtime() { return (time() - date('Z')); } function local_date($format, $time = NULL) { $timezone = isset($_SESSION['timezone']) ? $_SESSION['timezone'] : TIME_ZONE; if ($time === NULL) { $time = gmtime(); } elseif ($time <= 0) { return ''; } $time += ($timezone * 3600); return date($format, $time); } function local_strtotime($str) { $timezone = isset($_SESSION['timezone']) ? $_SESSION['timezone'] : TIME_ZONE; $time = strtotime($str) - $timezone * 3600; return $time; }class TourCommon { public static $pinyin = array(); public static function deleteRelativeImage($imgpath) { } public static function getKeyword($keyword) { $keyword = str_replace(' ','',trim($keyword)); $num = substr($keyword,1,strlen($keyword)); $out = ''; if(intval($num)) { $out = intval($num); } else { $out = $keyword; } return $out; } public static function getWebList() { $weblistModel = K("Weblist"); $arr =$weblistModel->order(" id asc ")->All(); foreach ($arr as $key => $value) { $arr[$key]['webid'] = $value['id']; $arr[$key]['webname'] = $value['webname']; } return $arr; } public static function getEditor($fname,$fvalue,$nwidth="700",$nheight="350",$etype="Sline",$ptype='',$gtype="print",$jsEditor=false) { require(STATIC_PATH . '/tour/vendor/slineeditor/ueditor.php'); $UEditor = new UEditor(); $UEditor->basePath = STATIC_PATH.'tour/vendor/slineeditor/'; $nheight = $nheight==400 ? 300 : $nheight; $config = $events = array(); $GLOBALS['tools'] = empty($toolbar[$etype])? $GLOBALS['tools'] : $toolbar[$etype] ; $config['toolbars'] = $GLOBALS['tools']; $config['minFrameHeight'] = $nheight; $config['initialFrameHeight'] = $nheight; $config['initialFrameWidth'] = $nwidth; if(!$jsEditor) { $code = $UEditor->editor($fname, $fvalue, $config, $events); } else { $code = $UEditor->jseditor($fname,$fvalue,$config,$events); } if($gtype=="print") { echo $code; } else { return $code; } } public static function getSeries($id,$prefix) { $ar = array( '01'=>'A', '02'=>'B', '05'=>'C', '03'=>'D', '08'=>'E', '13'=>'G', '14'=>'H', '15'=>'I', '16'=>'J', '17'=>'K', '18'=>'L', '19'=>'M', '20'=>'N', '21'=>'O', '22'=>'P', '23'=>'Q', '24'=>'R', '25'=>'S', '26'=>'T' ); $prefix = $ar[$prefix]; $len=strlen($id); $needlen=4-$len; if($needlen==3)$s='000'; else if($needlen==2)$s='00'; else if($needlen==1)$s='0'; $out=$prefix.$s."{$id}"; return $out; } public static function getSelectedAttr($typeid,$attr_str) { $productattr_arr=array(1=>'line_attr',2=>'hotel_attr',3=>'car_attr',4=>'article_attr',5=>'spot_attr',6=>'photo_attr',13=>'tuan_attr'); $attrtable = $typeid<14 ? $productattr_arr[$typeid] : 'model_attr'; $attrid_arr=explode(',',$attr_str); $attr_arr=array(); foreach($attrid_arr as $k=>$v) { if($typeid<14) { $attr=M($attrtable)->where("pid!=0 and id='$v'")->find(); } else { $attr=M($attrtable)->where("pid!=0 and id='$v' and typeid='$typeid'")->find(); } if($attr['id']) { $attr_arr[]=$attr; } } return $attr_arr; } public static function getSelectedIcon($iconlist) { $iconModel=K('Icon'); $iconarr=array(); if(!empty($iconlist)){ $iconid_arr=explode(',',$iconlist); $all_line_icon=cache('all_line_icon'); if(empty($all_line_icon)){ foreach($iconid_arr as $k=>$v) { $icon=$iconModel->find($v); if($icon['id']) $iconarr[]=$icon; } }else{ foreach($iconid_arr as $k=>$v) { foreach($all_line_icon as $ticon) { if($ticon['id']==$v){ $iconarr[]=$ticon; } } } } } return $iconarr; } public static function getPinYin($str, $ishead=0, $isclose=1) { $str = iconv('utf-8','gbk//ignore',$str); $restr = ''; $str = trim($str); $slen = strlen($str); if($slen < 2) { return $str; } if(count(self::$pinyin) == 0) { $fp = fopen(ROOT_PATH.'Static/tour/vendor/pinyin/pinyin.dat', 'r'); while(!feof($fp)) { $line = trim(fgets($fp)); self::$pinyin[$line[0].$line[1]] = substr($line, 3, strlen($line)-3); } fclose($fp); } for($i=0; $i<$slen; $i++) { if(ord($str[$i])>0x80) { $c = $str[$i].$str[$i+1]; $i++; if(isset(self::$pinyin[$c])) { if($ishead==0) { $restr .= self::$pinyin[$c]; } else { $restr .= self::$pinyin[$c][0]; } }else { $restr .= "_"; } }else if( preg_match("/[a-z0-9]/i", $str[$i]) ) { $restr .= $str[$i]; } else { $restr .= "_"; } } if($isclose==0) { unset(self::$pinyin); } $sheng = "/.*sheng.*/"; $shi = "/.*shi.*/"; $qu = "/.*qu.*/"; if(preg_match($sheng,$restr,$matches)) { $restr = str_replace('sheng','',$matches[0]); } if(preg_match($shi,$restr,$matches)) { $restr = str_replace('shi','',$matches[0]); } if(preg_match($qu,$restr,$matches)) { $restr = str_replace('qu','',$matches[0]); } return $restr; } public static function myDate($format,$timest) { $addtime = 8 * 3600; if(empty($format)) { $format = 'Y-m-d H:i:s'; } return gmdate ($format, $timest+$addtime); } public static function getTimeRange($type) { switch($type) { case 1: $starttime = strtotime(date('Y-m-d 00:00:00')); $endtime = strtotime(date('Y-m-d 23:59:59')); break; case 2: $starttime = strtotime(date('Y-m-d 00:00:00' , strtotime('-1 day'))); $endtime=strtotime(date('Y-m-d 23:59:59' , strtotime('-1 day'))); break; case 3: $starttime = mktime(0, 0 , 0,date("m"),date("d")-date("w")+1,date("Y"));; $endtime = time(); break; case 4: $starttime = strtotime(date('Y-m-d 00:00:00' , strtotime('last Sunday'))); $endtime = strtotime(date('Y-m-d H:i:s' , strtotime('last Sunday') + 7 * 24 * 3600 - 1)); break; case 5: $starttime = strtotime(date('Y-m-01 00:00:00' ,time())); $endtime = time(); break; case 6: $starttime = strtotime(date('Y-m-01 00:00:00' ,strtotime('-1 month'))); $endtime = strtotime(date('Y-m-31 23:59:00' ,strtotime('-1 month'))); break; } $out = array( $starttime, $endtime ); return $out; } } function getDestIdByPinYin($pinyin) { $row=cache('all_dest'); if(!empty($row)){ foreach($row as $val){ if($val['pinyin']==$pinyin && $val['isopen']=='1' ){ return $val['id']; } } }else{ return ''; } } function get_par_value($kindlist, $typeid) { $last_dest_id = array_remove_value($kindlist); $destinfo = getParentDestNav($last_dest_id); $arr = array('1'=>'旅游','2'=>'酒店','3'=>'租车','4'=>'攻略','5'=>'景点','6'=>'相册'); $arrType = array('1'=>'lines','2'=>'hotels','3'=>'cars','4'=>'raiders','5'=>'spots','6'=>'photos'); $str=''; if(!empty($destinfo)){ foreach($destinfo as $v) { $url=""; $webid=Q('webid',1); $attr = cache("weblist"); if($webid == "1"){ $url .= ""; }else{ foreach($attr as $val){ if($val["id"] == $webid){ $url .= "/".$val["webroot"]; break; } } } $str.= ' &gt; <span><a href="' . $url . '/' . $arrType[$typeid] . '/' . $v['pinyin'].'/">' . $v['kindname'] . $arr[$typeid] . '</a></span>'; } } return $str; } function getParentDestNav($destid) { if(empty($destid)) return null; $cdata=cache('parent_dest_nav_'.$destid,false,'data/cache/Data/dest'); if(empty($cdata)){ $_destModule=M('destinations'); $loopid=$destid; $result=array(); while(1) { $pidR=$_destModule->where( "id='$loopid'" )->field('pid')->find(); $pid=$pidR['pid']; $pinfo=$_destModule->where( "id='$pid'" )->find(); if(empty($pinfo)) break; else { $result[]=$pinfo; $loopid=$pinfo['id']; } } $count=count($result); for($i=$count-1;$i>=0;$i--) { $newresult[]=$result[$i]; } $destinfo=$_destModule->where( "id='$destid'" )->find(); $newresult[]=$destinfo; cache('parent_dest_nav_'.$destid,$newresult,'data/cache/Data/dest'); return $newresult; }else{ return $cdata; } } function array_remove_value($kindlist) { $db_prefix=C("DB_PREFIX"); $arr = explode(",", $kindlist); if(count($arr)==1) return $kindlist; $arr_new = array(); foreach($arr AS $val) { if($val != '36' && $val != '37') { $is_arr=M()->getOneRow("select id from ".$db_prefix."destinations where id='$val'"); if(!empty($is_arr)) $arr_new[] = $val; } } return @max($arr_new); } function getChildDest($destid,$typeid){ $db_prefix=C("DB_PREFIX"); $tables = array( '1'=>$db_prefix.'line_kindlist', '2'=>$db_prefix.'hotel_kindlist', '3'=>$db_prefix.'car_kindlist', '4'=>$db_prefix.'article_kindlist', '5'=>$db_prefix.'spot_kindlist', '6'=>$db_prefix.'photo_kindlist' ); $table = $tables[$typeid]; $destid=empty($destid)?0:$destid; $sql="select 
                a.id,
                a.kindname 
            from ".$db_prefix."destinations a left join 
                {$table} b on a.id=b.kindid 
            where a.isopen=1 and a.pid='$destid' order by case when b.displayorder is null then 9999 end, b.displayorder asc"; $result=M()->query($sql); if(empty($result)) { $sql2="select pid from ".$db_prefix."destinations where id=$destid"; $re=M()->getOneRow($sql2); $sql="select 
                    a.id,
                    a.kindname 
                from 
                    ".$db_prefix."destinations a left join 
                    {$table} b on a.id=b.kindid 
                where a.isopen=1 and a.pid='{$re['pid']}' order by  case when b.displayorder is null then 9999 end, b.displayorder asc"; $result=M()->query($sql); } return $result; } function getChildDests($destid,$typeid){ $db_prefix=C("DB_PREFIX"); $tables = array( '1'=>$db_prefix.'line_kindlist', '2'=>$db_prefix.'hotel_kindlist', '3'=>$db_prefix.'car_kindlist', '4'=>$db_prefix.'article_kindlist', '5'=>$db_prefix.'spot_kindlist', '6'=>$db_prefix.'photo_kindlist' ); $table = $tables[$typeid]; $destid=empty($destid)?0:$destid; $childdata=cache('child_'.$destid.'data',false,'data/cache/Data/destchild'); if(empty($childdata)){ $sql="select 
                a.id,
                a.kindname 
            from ".$db_prefix."destinations a left join 
                {$table} b on a.id=b.kindid 
            where a.isopen=1 and a.pid='$destid'
            order by case when b.displayorder is null then 9999 end, b.displayorder asc"; $result=M()->query($sql); cache('child_'.$destid.'data',$result,'data/cache/Data/destchild'); }else{ $result=$childdata; } return $result; } function getSearchUrl($val=null,$key=null,$exclude=null,$arr=array('para1','para2','day','priceid','sorttype','keyword','attrid','startcity'),$url="/lines/",$table="zh_line_attr") { return getUrlStatic($val,$key,$exclude,$arr,$url,$table); } function getSearchUrlWithPage($val=null,$key=null,$exclude=null,$arr=array('para1','para2','day','priceid','sorttype','keyword','attrid','startcity','pages'),$url="/lines/",$table="zh_line_attr") { return getUrlStatic($val,$key,$exclude,$arr,$url,$table); } function getUrlStatic($val=null,$key=null,$exclude=null,$arr,$url,$table,$usemdd=1){ $str = null; $webid = Q('webid',1); if($webid > 1){ $weblist = cache("weblist"); foreach($weblist as $web){ if($web["id"] == $webid){ $webroot = $web["webroot"]; break; } } $url = "/".$webroot.$url; } if($key == 'dest_id') { if(empty($_GET['para1'])) { $tpr1='0'; }else{ $tpr1=$_GET['para1']; } $destinationsModel=K('Destinations'); $destinfo = $destinationsModel->getDestInfo($val); if($destinfo['iswebsite']==1) { return $destinfo['weburl'].$url; } if($val == 'all') { return $url.'all-'.$tpr1.'-0-0-0-0-0-0-0.html'; } else { $py = $val; return $url.$py.'-'.$tpr1.'-0-0-0-0-0-0-0.html'; } } if($usemdd){ if($key == 'dest_id') { $destinationsModel=K('Destinations'); $destinfo = $destinationsModel->getDestInfo($val); if($val == 'all') { $str = $url.'all-'; } else { $py = $val; $py = !empty($py) ? $py : $val; $str = $url.$py.'-'; } }else{ if(isset($_GET['dest_id'])) { $dest_id=$_GET['dest_id']; $pinyin=$dest_id; if(!empty($pinyin)){ $pinyin=$pinyin; }else{ $pinyin='all'; } $str = $url.$pinyin.'-'; } } } else { $str = $url; } foreach($arr as $v) { if($v!='attrid') { if($key != $v) { $pa_v = pregReplace($_GET[$v],2); $str.=!empty($pa_v)?"{$pa_v}-":'0-'; } else { $str.= $val.'-'; } } } if(!empty($_GET['attrid'])) { $orgattr_arr=explode('_',$_GET['attrid']); } if($key=='attrid') { if(empty($_GET['attrid'])) { $str.=!empty($val) ? $val: '0'; } else { $all_line_attr=cache('all_line_attr'); if(empty($all_line_attr)){ $temp_result=M()->getOneRow("select pid from $table where id=$val"); $temp_attrid=M()->query("select id from $table where pid={$temp_result['pid']}"); }else{ foreach($all_line_attr as $tattr){ if($tattr['id']==$val){ $temp_result=$tattr; break; } } foreach($all_line_attr as $tattr){ if($tattr['pid']==$temp_result['pid']){ $temp_attrid[]=$tattr; } } } foreach($temp_attrid as $ke=>$va) { $attr_value[]=$va['id']; } foreach($orgattr_arr as $k=>$v) { if(empty($v)) { unset($orgattr_arr[$k]); } if(in_array($v,$attr_value)) { unset($orgattr_arr[$k]); break; } } $orgattr_arr[]=$val; if($val==0)unset($orgattr_arr); $str.=!empty($orgattr_arr) ? implode('_',$orgattr_arr):'0'; } } else { if(!empty($exclude)) { $has_exclude=M()->getOneRow("select count(*) as num from $table where id='$exclude'"); if($has_exclude['num']<=0) { $_exclude=M()->getOneRow("select id from $table where attrname='$exclude'"); $exclude=$_exclude['id']; } foreach($orgattr_arr as $k=>$v) { $one_arr=M()->getOneRow("select count(*) as num from $table where id='$v' and pid='$exclude'"); if($one_arr['num']>0) { unset($orgattr_arr[$k]); } } } $orgattr_arr=array_diff($orgattr_arr,array('',0)); $str.=!empty($orgattr_arr) ? implode('_',$orgattr_arr):'0'; } $url = $str.'.html'; return $url; } function getDestPinyin($destid) { $all_dest=cache('all_dest'); if(empty($all_dest)){ $db_prefix=C("DB_PREFIX"); $sql = "select pinyin from ".$db_prefix."destinations where id='$destid' and isopen='1'"; $row = M()->getOneRow($sql); return !empty($row['pinyin']) ? $row['pinyin'] : $destid; }else{ foreach($all_dest as $dest){ if($dest['pinyin']==$destid && $dest['isopen']=='1' ){ return !empty($dest['pinyin']) ? $dest['pinyin'] : $destid; } } } } function pregReplace($str,$type) { $pattern = ''; switch($type) { case '1': $pattern = "/[^a-zA-Z\x7f-\xff]+/"; break; case '2': $pattern = "/[^0-9]/"; break; case '3': $pattern = "/[^\x7f-\xff]/"; break; case '4': $pattern = "/[^0-9_]/"; break; case '5': $pattern = "/[^-|\x7f-\xff|0-9|a-zA-Z|@|:|.)]/"; break; } $out = preg_replace($pattern,'',$str); return $out; } function getAttWhere($attlist) { $arr=RemoveEmpty(explode('_',$attlist)); $str=""; foreach($arr as $value) { if($value!=0) { $str.=" and FIND_IN_SET($value,a.attrid) "; } } return $str; } if(!function_exists('RemoveEmpty')) { function RemoveEmpty($arr) { $newarr=array_diff($arr,array(null,'null','',' ')); return $newarr; } } function getMaxMinSuitTime($lineid){ $db_prefix=C("DB_PREFIX"); if(B2BLOGIN){ $sql = "select 
                min(a.day) as minday,max(a.day) as maxday 
            from ".$db_prefix."line_suit_price  AS a inner join
                ".$db_prefix."line_suit AS b on   a.suitid =b.id
            where a.lineid='$lineid'  and b.suittype='b2b' "; }else{ $sql = "select 
                min(a.day) as minday,max(a.day) as maxday 
            from ".$db_prefix."line_suit_price  AS a inner join
                ".$db_prefix."line_suit AS b on   a.suitid =b.id
            where a.lineid='$lineid'  and b.suittype='b2c' "; } $row = M()->getOneRow($sql); if(!empty($row['minday'])){ $row['minday']=date('y.m.d',$row['minday']); } if(!empty($row['maxday'])){ $row['maxday']=date('y.m.d',$row['maxday']); } if(empty($row['minday']) || empty($row['maxday'])) { return "出发日期请电询"; }else{ return $row['minday'].'～'.$row['maxday']; } } function getMaxMinSuitTimeShow($row){ if(B2BLOGIN){ if(!empty($row['b2bminday'])){ $row['minday']=date('y.m.d',$row['b2bminday']); } if(!empty($row['b2bmaxday'])){ $row['maxday']=date('y.m.d',$row['b2bmaxday']); } if(empty($row['b2bminday']) || empty($row['b2bmaxday'])) { return "出发日期请电询"; }else{ return $row['minday'].'～'.$row['maxday']; } }else{ if(!empty($row['minday'])){ $row['minday']=date('y.m.d',$row['minday']); } if(!empty($row['maxday'])){ $row['maxday']=date('y.m.d',$row['maxday']); } if(empty($row['minday']) || empty($row['maxday'])) { return "出发日期请电询"; }else{ return $row['minday'].'～'.$row['maxday']; } } } function getLineAttrName2($attrid,$count=1) { $out=""; $arr = getLineAttrArr($attrid); $i=0; foreach($arr as $v) { if($i>=$count){ break; } $out.="<li><span>{$v}</span></li> "; $i++; } return $out; } function getLineAttrArr($attrid,$esplit=',') { $db_prefix=C("DB_PREFIX"); $arr = explode($esplit,$attrid); $out = array(); $all_line_attr=cache('all_line_attr'); foreach($arr as $id) { if(!empty($all_line_attr)){ foreach($all_line_attr as $data){ if($data['id']==$id && $data['pid']!=0){ array_push($out,$data['attrname']); } } } } return $out; } function getLineRealPrice($id,$webid){ $price = 0 ; $price = getNewRealPrice($id,$webid); if($webid!=0) { } else { } return $price; } function getNewRealPrice($id,$webid) { $db_prefix=C("DB_PREFIX"); $time = time(); if(B2BLOGIN){ $sql = "select 
                    min(a.adultprice) as price 
                from 
                    ".$db_prefix."line_suit_price  AS a inner join
                     ".$db_prefix."line_suit AS b on   a.suitid =b.id
                    where 
                    a.lineid='$id' and a.day > '$time' and 
                    a.adultprice!=0  and b.suittype='b2b'  "; }else{ $sql = "select 
                    min(a.adultprice) as price 
                from 
                    ".$db_prefix."line_suit_price  AS a inner join
                     ".$db_prefix."line_suit AS b on   a.suitid =b.id
                    where 
                    a.lineid='$id' and a.day > '$time' and 
                    a.adultprice!=0  and b.suittype='b2c'  "; } $row = M()->getOneRow($sql); return $row['price'] ? $row['price'] : 0; } function updateVisit($aid,$typeid) { $db_prefix=C("DB_PREFIX"); $table=array( '1'=>$db_prefix.'line', '2'=>$db_prefix.'hotel', '3'=>$db_prefix.'car', '4'=>$db_prefix.'article', '5'=>$db_prefix.'spot', '6'=>$db_prefix.'photo', '8'=>$db_prefix.'visa', '13'=>$db_prefix.'tuan' ); $tablename = $table[$typeid]; $update="update {$tablename} set shownum=shownum+1 where  id=$aid"; M()->exe($update); } function getShopName($siteid){ $all_weblist=cache('weblist'); if(empty($all_weblist)){ $db_prefix=C("DB_PREFIX"); $sql = "select webname from ".$db_prefix."weblist where id='$siteid' "; $row = M()->getOneRow($sql); if(!empty($row['webname'])){ return $row['webname']; }else{ return '其他支店'; } }else{ foreach($all_weblist as $web){ if($web['id'] == $siteid ){ if(!empty($web['webname'])){ return $web['webname']; }else{ return '其他支店'; } } } return '其他支店'; } } function getWeekDay($num) { $arr=array('日','一','二','三','四','五','六'); return $arr[(int)$num]; } function head404() { header("HTTP/1.1 404 Not Found"); header("Status: 404 Not Found"); echo "<script>window.location.href='/404.php'</script>"; exit; } function getSeries($id,$prefix) { $ar = array( '01'=>'A', '02'=>'B', '05'=>'C', '03'=>'D', '08'=>'E', '13'=>'G', '14'=>'H', '15'=>'I', '16'=>'J', '17'=>'K', '18'=>'L', '19'=>'M', '20'=>'N', '21'=>'O', '22'=>'P', '23'=>'Q', '24'=>'R', '25'=>'S', '26'=>'T' ); $prefix = $ar[$prefix]; $len=strlen($id); $needlen=4-$len; if($needlen==3)$s='000'; else if($needlen==2)$s='00'; else if($needlen==1)$s='0'; $out=$prefix.$s."{$id}"; return $out; } function getTourer($info) { $arr = array(); foreach($info as $k=>$v) { if(preg_match('/^tourer/',$k)) { preg_match('/[1-3][0-9]/',$k,$match); if(!isset($arr[$match[0]])) { $arr[$match[0]] = array(); $arr[$match[0]][$k]=pregReplace($v,5); } else { $arr[$match[0]][$k]=pregReplace($v,5); } } } return $arr; } if(!function_exists("get_order_sn")) { function get_order_sn($kind) { mt_srand((double) microtime() * 1000000); return $kind.date('md') . str_pad(mt_rand(1, 9999), 4, '0', STR_PAD_LEFT); } } function get_handle_shop_all(){ $shoparr=array( '1'=>'上海支店', '2'=>'北京支店', '3'=>'成都支店', '4'=>'广州支店', '5'=>'青岛支店', '6'=>'大连支店', ); return $shoparr; } function get_handle_shop(){ $shoparr=array( '3'=>'成都支店', '4'=>'广州支店', '5'=>'青岛支店', '6'=>'大连支店', ); return $shoparr; } function get_shop_mail( $id ){ $arr_mail = array( '1'=>'china@his-shaout.cn', '2'=>'outbound@his-china.com', '3'=>'info@his-cd.com', '4'=>'info-outbound@his-gz.com', '5'=>'xr@his-qingdao.com', '6'=>'his-dl@xr-dl.com', '7'=>'info@his-sz.cn', ); return $arr_mail[$id]; } function get_shop_mail_name( $id ){ $arr_mail = array( '1'=>'H.I.S.上海支店', '2'=>'H.I.S.北京支店', '3'=>'H.I.S.成都支店', '4'=>'H.I.S.广州支店', '5'=>'H.I.S.青岛支店', '6'=>'H.I.S.大连支店', '7'=>'H.I.S.苏州支店', ); return $arr_mail[$id]; } function getIconList($iconids,$esplit=',') { $db_prefix=C("DB_PREFIX"); $arr = explode($esplit,$iconids); $out = array(); $all_line_icon=cache('all_line_icon'); if(empty($all_line_icon)){ $sql = "select * from ".$db_prefix."icon "; $result=M()->query($sql); $all_line_icon=$result; cache('all_line_icon',$result); } foreach($arr as $id) { foreach($all_line_icon as $icon){ if($icon['id']==$id){ array_push($out,$icon); } } } $count=10; $i=0; $outstr=""; foreach($out as $v) { if($i>$count){ break; } $outstr .= '<li><img src="'.$v["picurl"].'" width="32" height="20" alt="'.$v["kind"].'"></li>'; $i++; } return $outstr; } function getSearchKeyUrl($val){ $url = "/index.php?a=Index&c=Search&m=coloudsearch"; $str = ""; $webid = Q('webid',1); if($webid > 1){ $weblist = cache("weblist"); foreach($weblist as $web){ if($web["id"] == $webid){ $webroot = $web["webroot"]; break; } } $url = "/".$webroot.$url; } $str = $url."&keyword=".$val; return $str; }if (!defined("ZHPHP_PATH")) exit('No direct script access allowed'); class Cache { protected $isConnect = false; protected $options = array(); static public function init($options = array()){ return CacheFactory::factory($options); } protected function record($type, $stat = 1) { if (!DEBUG && !C("SHOW_CACHE")) return; if ($type === 1) { $stat ? Debug::$cache['write_s']++ : Debug::$cache['write_f']++; } else { $stat ? Debug::$cache['read_s']++ : Debug::$cache['read_f']++; } } protected function queue($name){ static $drivers = array( "file" => "F" ); $driver = isset($this->options['Driver']) ? $this->options['Driver'] : 'file'; $_queue = $drivers[$driver][0]("zhphp_queue"); if (!$_queue) { $_queue = array(); } array_push($_queue, $name); $zhphp_queue = array_unique($_queue); if (count($zhphp_queue) > $this->options['length']) { $gc = array_shift($hdphp_queue); if ($gc) $this->del($gc); } return $drivers[$driver][0]("zhphp_queue", $zhphp_queue); } }if (!defined("ZHPHP_PATH")) exit('No direct script access allowed'); final class CacheFactory { public static $cacheFactory = null; protected $cacheList = array(); private function __construct() { } public static function factory($options){ $options = is_array($options) ? $options : array(); if (is_null(self::$cacheFactory)) { self::$cacheFactory = new CacheFactory(); } $driver = isset($options['driver']) ? $options['driver'] : C("CACHE_TYPE"); $driverName = md5_d($options); if (isset(self::$cacheFactory->cacheList[$driverName])) { return self::$cacheFactory->cacheList[$driverName]; } $class = 'Cache' . ucwords(strtolower($driver)); if(!class_exists($class)){ $classFile = ZHPHP_DRIVER_PATH . 'Cache/' . $class . '.class.php'; if (!require_cache($classFile)) { halt("缓存类型指定错误，不存在缓存驱动文件:" . $classFile); } } $cacheObj = new $class($options); self::$cacheFactory->cacheList[$driverName] = $cacheObj; return self::$cacheFactory->cacheList[$driverName]; } }if (!defined("ZHPHP_PATH")) exit('No direct script access allowed'); class CacheFile extends Cache { public function __construct($options = array()){ $this->options['dir'] = isset($options['dir']) ? rtrim($options['dir'], '/') : CACHE_PATH; $this->options['expire'] = isset($options['expire']) ? intval($options['expire']) : C("CACHE_TIME"); $this->options['prefix'] = isset($options['prefix']) ? $options['prefix'] : ''; $this->options['length'] = isset($options['length']) ? $options['length'] : 0; $this->options['zip'] = isset($options['zip']) ? $options['zip'] : false; $this->options['save'] = isset($options['save']) ? $options['save'] : true; $this->isConnect = is_dir($this->options['dir']) && is_writeable($this->options['dir']); if (!$this->isConnect) { $this->createDir(); } } private function createDir() { $this->isConnect = dir_create($this->options['dir']); } protected function getCacheFile($name) { return $this->options['dir'] . '/' . $this->options['prefix'] . $name . ".php"; } public function set($name, $data, $expire = null){ $cacheFile = $this->getCacheFile($name); if (is_null($data)) { if (is_file($cacheFile)) { return unlink($cacheFile); } else { return true; } } $expire = sprintf("%010d", !is_null($expire) ? (int)$expire : $this->options['expire']); if (!$this->isConnect) { $this->createDir(); } $data = serialize($data); if ($this->options['zip'] && function_exists("gzcompress")) { $data = gzcompress($data, 6); } $data = "<?php\n//" . $expire . $data . "\n?>"; $stat = file_put_contents($cacheFile, $data); if ($stat) { if ($this->options['length'] > 0) { $this->queue($name); } $this->record(1,1); return true; }else { $this->record(1,0); return false; } } public function get($name){ $cacheFile = $this->getCacheFile($name); if (!is_file($cacheFile)) { $this->record(2,0); return null; } $content = @file_get_contents($cacheFile); if (!$content) { $this->record(2,0); return null; } $expire = intval(substr($content, 8, 10)); $mtime = filemtime($cacheFile); if ($expire > 0 && $mtime + $expire < time()) { @unlink($cacheFile); $this->record(2,0); return false; } $data = substr($content, 18, -3); if ($this->options['zip'] && function_exists("gzuncompress")) { $data = gzuncompress($data); } $this->record(2,1); return unserialize($data); } public function del($name) { $cacheFile = $this->getCacheFile($name); return is_file($cacheFile) && unlink($cacheFile); } public function delAll($time = null) { foreach (glob($this->options['dir'] . '/*.*') as $file) { if (is_file($file)) { if ($time) { (filemtime($file) + $time < time()) && unlink($file); } else { unlink($file); } } } return true; } }if (!defined("ZHPHP_PATH")) exit('No direct script access allowed'); abstract class Db implements DbInterface { protected $table = NULL; public $fieldArr; public $lastQuery; public $pri = null; public $opt = array(); public $opt_old = array(); public $lastSql; public $error = NULL; protected $cacheTime = NULL; protected $dbPrefix; protected $condition = array( "eq" => " = ", "neq" => " <> ", "gt" => " > ", "egt" => " >= ", "lt" => " < ", "elt" => " <= ", ); public function connect($table){ if ($this->connectDb()) { if (!is_null($table)) { $this->dbPrefix = C("DB_PREFIX"); $this->table($table); $this->table = $table; $this->pri = $this->opt['pri']; $this->fieldArr = $this->opt['fieldArr']; $this->optInit(); }else { $this->optInit(); } return $this->link; } halt("数据库连接出错了请检查数据库配置"); } public function table($tableName) { if (is_null($tableName)) return; $this->optInit(); $field = $this->getFields($tableName); $this->opt['table'] = $tableName; $this->opt['pri'] = isset($field['pri']) && !empty($field['pri']) ? $field['pri'] : ''; $this->opt['fieldArr'] = $field['field']; } public function optInit(){ $this->opt_old = $this->opt; $this->cacheTime = NULL; $this->error = NULL; $opt = array( 'table' => $this->table, 'pri' => $this->pri, 'field' => '*', 'fieldArr' => $this->fieldArr, 'where' => '', 'like' => '', 'group' => '', 'having' => '', 'order' => '', 'limit' => '', 'in' => '', 'cache' => '', 'filter_func' => array() ); $this->opt = array_merge($this->opt, $opt); } public function getFields($tableName){ $tableCache = $this->getCacheTable($tableName); $tableField = array(); foreach ($tableCache as $v) { $tableField['field'][] = $v['field']; if ($v['key']) { $tableField['pri'] = $v['field']; } } return $tableField; } private function getCacheTable($tableName){ if (!DEBUG) { $cacheTableField = F($tableName, false, TABLE_PATH); if ($cacheTableField) return $cacheTableField; } $tableinfo = $this->getTableFields($tableName); $fields = $tableinfo['fields']; if (!DEBUG) { F($tableName, $fields, TABLE_PATH); } return $fields; } public function getTableFields($tableName){ $sql = "show columns from " . $tableName; $fields = $this->query($sql); if ($fields === false) { error("表{$tableName}不存在", false); } $n_fields = array(); $f = array(); foreach ($fields as $res) { $f ['field'] = $res ['Field']; $f ['type'] = $res ['Type']; $f ['null'] = $res ['Null']; $f ['field'] = $res ['Field']; $f ['key'] = ($res ['Key'] == "PRI" && $res['Extra']) || $res ['Key'] == "PRI"; $f ['default'] = $res ['Default']; $f ['extra'] = $res ['Extra']; $n_fields [$res ['Field']] = $f; } $pri = ''; foreach ($n_fields as $v) { if ($v['key']) { $pri = $v['field']; } } $info = array(); $info['fields'] = $n_fields; $info['primarykey'] = $pri; return $info; } protected function debug($sql) { $this->lastSql = $sql; if (DEBUG && !preg_match("/^\s*show/i", $sql)) { Debug::$sqlExeArr[] = $sql; } } protected function error($error) { $this->error = $error; if (DEBUG) { error($this->error); } else { log_write($this->error); } } public function select($where){ if (empty($this->opt['table'])) { $this->error("没有可操作的数据表"); return false; } if (!empty($where)) $this->where($where); $sql = 'SELECT ' . $this->opt['field'] . ' FROM ' . $this->opt['table'] . $this->opt['where'] . $this->opt['group'] . $this->opt['having'] . $this->opt['order'] . $this->opt['limit']; $data = $this->query($sql); return $data; } public function insert($data, $type = 'INSERT'){ $value = $this->formatField($data); if (empty($value)) { $this->error("没有任何数据用于 INSERT"); return false; }else { $sql = $type . " INTO " . $this->opt['table'] . "(" . implode(',', $value['fields']) . ")" . "VALUES (" . implode(',', $value['values']) . ")"; return $this->exe($sql); } } public function formatField($vars){ $data = array(); foreach ($vars as $k => $v) { if (!$this->isField($k) || is_array($v)) { continue; } $data['fields'][] = "`" . $k . "`"; $v = $this->escapeString($v); $data['values'][] = "\"" . $v . "\""; } return $data; } public function update($data){ if (empty($this->opt['where'])) { if (isset($data[$this->opt['pri']])) { $this->opt['where'] = " WHERE " . $this->opt['pri'] . " = " . intval($data[$this->opt['pri']]); }else { $this->error('UPDATE更新语句必须输入条件'); return false; } } $data = $this->formatField($data); if (empty($data)) return false; $sql = "UPDATE " . $this->opt['table'] . " SET "; foreach ($data['fields'] as $n => $field) { if($data['values'][$n] == '"NULL"'){ $sql .= $field . "=NULL,"; }else{ $sql .= $field . "=" . $data['values'][$n] . ','; } } $sql = trim($sql, ',') . $this->opt['where'] . $this->opt['limit']; return $this->exe($sql); } public function delete($data = array()) { $this->where($data); if (empty($this->opt['where'])) { $this->error("DELETE删除语句必须输入条件"); return false; } $sql = "DELETE FROM " . $this->opt['table'] . $this->opt['where'] . $this->opt['limit']; return $this->exe($sql); } private function statistics($type, $data) { $type = strtoupper($type); if (empty($data)) { $field = " {$type}(" . $this->opt['pri'] . ") AS " . $this->opt['pri']; } else if (is_string($data)) { $s = explode("|", $data); $field = " {$type}(" . $s[0] . ")"; $field .= isset($s[1]) ? ' AS ' . $s[1] : ''; } $this->opt['field'] = $field; } public function count($data) { if(empty($data))$data=' * '; $this->statistics(__FUNCTION__, $data); $result = $this->select(""); return is_array($result) && !empty($result) ? intval(current($result[0])) : NULL; } public function max($data) { $this->statistics(__FUNCTION__, $data); $result = $this->select(""); return is_array($result) && !empty($result) ? current($result[0]) : NULL; } public function min($data) { $this->statistics(__FUNCTION__, $data); $result = $this->select(""); return is_array($result) && !empty($result) ? current($result[0]) : NULL; } public function avg($data) { $this->statistics(__FUNCTION__, $data); $result = $this->select(""); return is_array($result) && !empty($result) ? current($result[0]) : NULL; } public function sum($data) { $this->statistics(__FUNCTION__, $data); $result = $this->select(""); return is_array($result) && !empty($result) ? current($result[0]) : NULL; } public function isTable($table, $full = true) { if (!$full) $table = C('DB_PREFIX') . $table; $table = strtolower($table); $info = $this->query('show tables'); foreach ($info as $n => $d) { if ($table == current($d)) { return true; } } return false; } public function fieldFilter($opt) { if (empty($opt) || !is_array($opt)) return null; $field = array(); foreach ($opt as $k => $v) { if ($this->isField($k)) $field[$k] = $v; } return $field; } public function where($opt){ $where = ''; if (empty($opt)) { return false; } else if (is_numeric($opt)) { $where .= ' ' . $this->opt['pri'] . "=$opt "; } else if (is_string($opt)) { $where .= " $opt "; } else if (is_numeric(key($opt)) && is_numeric(current($opt))) { $where .= ' ' . $this->opt['pri'] . ' IN(' . implode(',', $opt) . ')'; } else if (is_array($opt)) { foreach ($opt as $k => $v) { if (method_exists($this, $k)) { $this->$k($v); }else if (is_array($v)) { foreach ($v as $n => $m) { if (isset($this->condition[$n])) { $where .= " $k" . $this->condition[$n] . (is_numeric($m) ? $m : "'$m'"); } else if (in_array(strtoupper($m), array("OR", "AND"))) { if (preg_match('@(OR|AND)\s*$@i', $where)) { $where = substr($where, 0, -4); } $where .= strtoupper($m) . ' '; } else { if (is_numeric($m)) { $where .= " $k in(" . implode(',', $v) . ") "; } else { $where .= " $k in('" . implode("','", $v) . "') "; } break; } if (!preg_match('@(or|and)\s*$@i', $where)) { $where .= ' AND '; } } if (!preg_match('@(or|and)\s*$@i', $where)) { $where .= ' AND '; } }else { if (is_numeric($k) && in_array(strtoupper($v), array('OR', 'AND'))) { if (preg_match('@(or|and)\s*$@i', $where)) { $where = substr($where, 0, -4); } $where .= strtoupper($v) . ' '; }else if (is_numeric($k) && is_string($v)) { $where .= $v . ' AND '; }else if (is_string($k)) { $where .= (is_numeric($v) ? " $k=$v " : " $k='$v' ") . ' AND '; } } } } $where = trim($where); if (!empty($where)) { if (empty($this->opt['where'])) { $this->opt['where'] = " WHERE $where"; } elseif (!preg_match('@^\s*(or|and)@i', $where)) { $this->opt['where'] .= ' AND ' . $where; } } $this->opt['where'] = preg_replace('@(or|and)\s*$@i', '', $this->opt['where']); } public function in($data) { $in = ''; if (!is_array($data)) { $in .= $this->opt['pri'] . " IN(" . $data . ") "; } else if (is_array($data) && !empty($data)) { if (is_string(key($data))) { $_v = current($data); if (!is_array($_v)) { $in .= "" . key($data) . " IN({$_v}) "; } else if (is_string($_v[0])) { $in .= " " . key($data) . " IN('" . implode("','", current($data)) . "') "; } else { $in .= " " . key($data) . " IN(" . implode(",", current($data)) . ") "; } } else { $in .= $this->opt['pri'] . " IN(" . implode(",", $data) . ") "; } } if (empty($this->opt['where'])) { $this->opt['where'] = " WHERE $in "; } else if (!preg_match("@^\s*(or|and)@i", $in)) { $this->opt['where'] .= " AND " . $in; } else { $this->opt['where'] .= "  " . $in; } } public function field($data){ if (is_string($data)) { $data = explode(",", $data); } $field = trim($this->opt['field']) == '*' ? '' : $this->opt['field'] . ','; foreach ($data as $d) { $a = explode("|", $d); $field .= trim($a[0]); $field .= isset($a[1]) ? ' AS ' . $a[1] . ',' : ','; } $this->opt['field'] = substr($field, 0, -1); } protected function isField($field) { return is_string($field) && in_array($field, $this->opt['fieldArr']); } public function limit($data) { $limit = ''; if (is_array($data)) { $limit .= implode(",", $data); } else { $limit .= $this->opt['limit'] . " $data "; } $this->opt['limit'] = " LIMIT $limit "; } public function order($data){ $order = ""; if (is_string($data)) { $order .= $data; }else if (is_array($data)) { foreach ($data as $f => $t) { $order .= " $f $t,"; } $order = substr($order, 0, -1); } if (empty($this->opt['order'])) { $this->opt['order'] = " ORDER BY $order "; } else { $this->opt['order'] .= "," . $order; } } public function group($opt) { $group = ""; if (is_string($opt)) { $group .= $opt; } else if (is_array($opt)) { $group .= implode(",", $opt); } if (empty($this->opt['group'])) { $this->opt['group'] = " GROUP BY $group"; } else { $this->opt['group'] .= ",$group "; } } public function having($opt) { $having = ""; if (is_string($opt)) { $having .= $opt; } if (empty($this->opt['having'])) { $this->opt['having'] = " HAVING $having"; } else if (!preg_match("@^\s*(or|and)@i", $having)) { $this->opt['having'] .= " AND " . $having; } else { $this->opt['having'] .= " " . $having; } } public function getLastSql() { return $this->lastSql; } public function getAllSql() { return Debug::$sqlExeArr; } public function cache($time = -1) { $this->cacheTime = is_numeric($time) ? $time : -1; } public function getTableInfo($table) { $table = empty($table) ? null : $table; $info = $this->query("SHOW TABLE STATUS FROM " . C("DB_DATABASE")); $arr = array(); $arr['total_size'] = 0; $arr['total_row'] = 0; foreach ($info as $k => $t) { if ($table) { if (!in_array($t['Name'], $table)) { continue; } } $arr['table'][$t['Name']]['tablename'] = $t['Name']; $arr['table'][$t['Name']]['engine'] = $t['Engine']; $arr['table'][$t['Name']]['rows'] = $t['Rows']; $arr['table'][$t['Name']]['collation'] = $t['Collation']; $charset = $arr['table'][$t['Name']]['collation'] = $t['Collation']; $charset = explode("_", $charset); $arr['table'][$t['Name']]['charset'] = $charset[0]; $arr['table'][$t['Name']]['datafree'] = $t['Data_free']; $arr['table'][$t['Name']]['size'] = $t['Data_free'] + $t['Data_length']; $info = $this->getTableFields($t['Name']); $arr['table'][$t['Name']]['field'] = $info['fields']; $arr['table'][$t['Name']]['primarykey'] = $info['primarykey']; $arr['table'][$t['Name']]['autoincrement'] = $t['Auto_increment'] ? $t['Auto_increment'] : ''; $arr['total_size'] += $arr['table'][$t['Name']]['size']; $arr['total_row']++; } return empty($arr) ? false : $arr; } public function getSize($table) { $sql = "show table status from " . C("DB_DATABASE"); $row = $this->query($sql); $size = 0; foreach ($row as $v) { if ($table) { $size += in_array(strtolower($v['Name']), $table) ? $v['Data_length'] + $v['Index_length'] : 0; } } return get_size($size); } }if (!defined("ZHPHP_PATH")) exit('No direct script access allowed'); final class DbFactory { public static $dbFactory = null; protected $driverList = array(); private function __construct() { } public static function factory($driver = null, $tableName = null){ if (is_null(self::$dbFactory)) { self::$dbFactory = new dbFactory(); } if (is_null($driver)) { $driver = ucfirst(strtolower(C("DB_DRIVER"))); } if (is_null($tableName)) { $tableName = 'empty'; } if (isset(self::$dbFactory->driverList[$tableName]) && self::$dbFactory->driverList[$tableName]->link) { return self::$dbFactory->driverList[$tableName]; } if (self::$dbFactory->getDriver($driver, $tableName)) { return self::$dbFactory->driverList[$tableName]; } else { return false; } } private function getDriver($driver, $tableName){ $class = "Db" . $driver; $classFile = ZHPHP_DRIVER_PATH . 'Db/Driver/' . $class . '.Tool.php'; require_cache($classFile); $this->driverList[$tableName] = new $class; $table = $tableName == 'empty' ? null : $tableName; return $this->driverList[$tableName]->connect($table); } private function close() { foreach ($this->driverList as $db) { $db->close(); } } function __destruct() { $this->close(); } }if (!defined("ZHPHP_PATH")) exit('No direct script access allowed'); interface DbInterface { public function connectDb(); public function close(); public function exe($sql); public function query($sql); public function getInsertId(); public function getAffectedRows(); public function getVersion(); public function beginTrans(); public function commit(); public function rollback(); public function escapeString($str); }if (!defined("ZHPHP_PATH")) exit('No direct script access allowed'); class Model { public $tableFull = NULL; public $table = NULL; public $db = NULL; public $error = NULL; public $trigger = TRUE; public $joinTable = array(); public $data = array(); public $validate = array(); public $auto = array(); public $map = array(); public function __construct($table = null, $full = false, $driver = null, $param = array()) { if (method_exists($this, "__init")) { $this -> __init($param); } $this -> run($table, $full, $driver); } protected function run($table, $full = false, $driver = null) { $this -> getTable($table, $full); $db = DbFactory::factory($driver, $this -> tableFull); if ($db) { $this -> db = $db; } else { if (DEBUG) { error(mysqli_connect_error() . "数据库连接出错了请检查配置文件中的参数", false); } else { Log::write("数据库连接出错了请检查配置文件中的参数"); } } } public function is_only($col, $name, $id = 0, $where='') { $sql = 'SELECT COUNT(*)  FROM ' .$this->tableFull. " WHERE $col = '$name'"; $sql .= empty($id) ? '' : ' AND ' . $this->db->pri. " <> '$id'"; $sql .= empty($where) ? '' : ' AND ' .$where; $result=$this->db->query($sql); return $result[0]['COUNT(*)'] == 0; } public function group($arg = array()) { if (empty($arg)) return $this; $this -> db -> group($arg); return $this; } public function drop($id) { $data=array( $this->db->pri=>$id ); return $this -> delete($data); } public function del($data = array()) { return $this -> delete($data); } public function delete($data = array()) { $trigger = $this -> trigger; $this -> trigger = true; $trigger and $this -> __before_delete($data); $result = $this -> db -> delete($data); $this -> error = $this -> db -> error; $trigger and $this -> __after_delete($result); return $result; } public function in($arg = array()) { if (empty($arg)) return $this; $this->db->in($arg); return $this; } public function dropTable($tableName) { if ($this -> tableExists($tableName)) { return $this -> exe("DROP TABLE IF EXISTS `" . C('DB_PREFIX') . $tableName . "`"); } } public function order($arg = array()) { if (empty($arg)) return $this; $this -> db -> order($arg); return $this; } public function join($table = FALSE) { if (!$table) { $this -> joinTable = FALSE; } else if (is_string($table)) { $this -> joinTable = explode(",", $table); } else if (is_array($table)) { $this -> joinTable = $table; } return $this; } public function tableExists($tableName) { $Model = M(); $tableArr = $Model -> query("SHOW TABLES"); foreach ($tableArr as $k => $table) { $tableTrue = $table['Tables_in_' . C('DB_DATABASE')]; if (strtolower($tableTrue) == strtolower(C('DB_PREFIX') . $tableName)) { return true; } } return false; } public function fieldExists($fieldName, $table) { $Model = M(); if (!$Model -> tableExists($table)) { $this -> error = '数据表不存在'; } else { $field = $Model -> query("DESC " . C("DB_PREFIX") . $table); foreach ($field as $f) { if (strtolower($f['Field']) == strtolower($fieldName)) { return true; } } return false; } } public function getField($field, $return_all = false) { $this -> field($field); $result = $this -> select(); if ($result) { $field = explode(',', preg_replace('@\s@', '', $field)); if (count($field) > 1) { $data = array(); foreach ($result as $v) { $data[$v[$field[0]]] = $v; } return $data; }else if ($return_all) { $data = array(); foreach ($result as $v) { if (isset($v[$field[0]])) $data[] = $v[$field[0]]; } return $data; } else { return current($result[0]); } }else { return NULL; } } public function query($data = array()) { return $this -> db -> query($data); } public function runSql($sql) { return $this -> exe($sql); } public function exe($sql) { return $this -> db -> exe($sql); } protected function getTable($table = null, $full = false) { if (!is_null($this -> tableFull)) { $table = $this -> tableFull; }elseif (!is_null($this -> table)) { $table = C("DB_PREFIX") . $this -> table; } else if (is_null($table)) { $table = null; } elseif (!is_null($table)) { if ($full === true) { $table = $table; } else { $table = C("DB_PREFIX") . $table; } }else { $table = C("DB_PREFIX") . CONTROL; } $this -> tableFull = $table; $this -> table = preg_replace('@^\s*' . C("DB_PREFIX") . '@', '', $table); } public function where($args = array()) { if (!empty($args)) { $this -> db -> where($args); } return $this; } public function field($field = array(), $check = true) { if (empty($field)) return $this; $this -> db -> field($field, $check); return $this; } public function count($args = array()) { $result = $this -> db -> count($args); return $result; } public function find($data = array()) { $this -> limit(1); $result = $this -> select($data); return is_array($result) && isset($result[0]) ? $result[0] : $result; } public function select($args = array()) { $trigger = $this -> trigger; $this -> trigger = true; $trigger and $this -> __before_select($arg); $result = $this -> db -> select($args); $trigger and $this -> __after_select($result); $this -> error = $this -> db -> error; return $result; } public function limit($start = null, $end = null) { if (is_null($start)) { return $this; } else if (!is_null($end)) { $limit = $start . "," . $end; } else { $limit = $start; } $this -> db -> limit($limit); return $this; } public function add($data = array(), $type = 'INSERT') { return $this -> insert($data, $type); } public function insert($data = array(), $type = "INSERT") { $this -> data($data); $data = $this -> data; $this -> data = array(); $trigger = $this -> trigger; $this -> trigger = true; $trigger and $this -> __before_insert($data); $result = $this -> db -> insert($data, $type); $this -> error = $this -> db -> error; $trigger and $this -> __after_insert($result); return $result; } public function update($data = array()) { $this -> data($data); $data = $this -> data; $this -> data = array(); $trigger = $this -> trigger; $this -> trigger = true; $trigger and $this -> __before_update($data); if (empty($data)) { $this -> error = "没有任何数据用于UPDATE！"; return false; } $result = $this -> db -> update($data); $this -> error = $this -> db -> error; $trigger and $this -> __after_update($result); return $result; } public function data($data = array()) { if (is_array($data) && !empty($data)) { $this -> data = $data; } else if (empty($this -> data)) { $this -> data = $_POST; } foreach ($this->data as $key => $val) { if (MAGIC_QUOTES_GPC && is_string($val)) { if($val == 'NULL' || $val == 'null'){ $this -> data[$key] = 'NULL'; }else{ $this -> data[$key] = stripslashes($val); } } } return $this; } public function create($data = array()) { if (!$this -> token()) { return false; } $this -> data($data); if (!$this -> validate()) { return false; } $this -> auto(); $this -> map(); return true; } protected function map() { if (empty($this -> map)) return; $this -> data(); foreach ($this->map as $k => $v) { if (isset($this -> data[$k])) { $this -> data[$v] = $this -> data[$k]; unset($this -> data[$k]); } } } public function auto($data = array()) { $this -> data($data); $_data = &$this -> data; $motion = $this -> getCurrentMethod(); foreach ($this->auto as $v) { $type = isset($v[4]) ? $v[4] : 3; if ($motion != $type && $type != 3) { continue; } $name = $v[0]; $action = $v[1]; $condition = isset($v[3]) ? $v[3] : 1; switch ($condition) { case 1 : if (!isset($_data[$name])) { continue 2; } break; case 2 : if (!isset($_data[$name])) $_data[$name] = ''; break; case 3 : if (empty($_data[$name])) { continue 2; } break; } $handle = isset($v[2]) ? $v[2] : "string"; $_data[$name] = isset($_data[$name]) ? $_data[$name] : NULL; switch (strtolower($handle)) { case "function" : if (function_exists($action)) { $_data[$name] = $action($_data[$name]); } break; case "method" : if (method_exists($this, $action)) { $_data[$name] = $this -> $action($_data[$name]); } break; case "string" : $_data[$name] = $action; break; } } } public function table($table, $full = FALSE) { if ($full !== TRUE) { $table = C("DB_PREFIX") . $table; } $this -> db -> table($table); $this -> join(FALSE); $this -> trigger(FALSE); return $this; } public function trigger($stat = FALSE) { $this -> trigger = $stat; return $this; } public function validate($data = array()) { $this -> data($data); $current_method = $this -> getCurrentMethod(); $_data = &$this -> data; if (!is_array($this -> validate) || empty($this -> validate)) { return true; } foreach ($this->validate as $v) { $name = $v[0]; $action = isset($v[4]) ? $v[4] : 3; if (!in_array($action, array($current_method, 3))) { continue; } $condition = isset($v[3]) ? $v[3] : 1; $msg = $v[2]; switch ($condition) { case 1 : if (!isset($_data[$name])) { continue 2; } break; case 2 : if (!isset($_data[$name])) { $this -> error = $msg; return false; } break; case 3 : if (!isset($_data[$name]) || empty($_data[$name])) { continue 2; } break; } if($_pos = strpos($v[1],':')){ $func = substr($v[1],0,$_pos); $args = substr($v[1],$_pos+1); }else{ $func = $v[1]; $args=''; } if (method_exists($this, $func)) { $res = call_user_func_array(array($this, $func), array($name, $_data[$name], $msg, $args)); if ($res === true) { continue; } $this -> error = $res; return false; } else if (function_exists($func)) { $res = $func($name, $_data[$name], $msg, $args); if ($res === true) { continue; } $this -> error = $res; return false; }else { $validate = new Validate(); $func = '_' . $func; if (method_exists($validate, $func)) { $res = call_user_func_array(array($validate, $func), array($name, $_data[$name], $msg, $args)); if ($res === true) { continue; } $this -> error = $res; return false; } } } return true; } public function getTableInfo($table = array()) { return $this -> db -> getTableInfo($table); } public function optimize($table) { if (is_array($table) && !empty($table)) { foreach ($table as $t) { $this -> exe("OPTIMIZE TABLE `" . $t . "`"); } return true; } } public function repair($table) { if (is_array($table) && !empty($table)) { foreach ($table as $t) { $this -> exe("REPAIR TABLE `" . $t . "`"); } return true; } } public function all($args = array()) { return $this -> select($args); } protected function getCurrentMethod() { return isset($this -> data[$this -> db -> pri]) ? 2 : 1; } public function inc($field, $where, $step = 1) { $sql = "UPDATE " . $this -> db -> opt['table'] . " SET " . $field . '=' . $field . '+' . $step . " WHERE " . $where; return $this -> exe($sql); } public function token() { if (C("TOKEN_ON") || isset($_POST[C("TOKEN_NAME")]) || isset($_GET[C("TOKEN_NAME")])) { if (!Token::check()) { $this -> error = '表单令牌错误'; return false; } } return true; } public function __set($var, $value) { $_var = strtolower($var); $property = array_keys($this -> db -> opt); if (in_array($_var, $property)) { $this -> $_var($value); } else { $this -> data[$var] = $value; } } public function save($data = array()) { return $this -> update($data); } public function __before_insert(&$data) { } public function __after_insert($data) { } public function __before_delete(&$data) { } public function __after_delete($data) { } public function __before_update(&$data) { } public function __after_update($data) { } public function __before_select(&$data) { } public function __after_select($data) { } public function getRow($args = array()) { $result=$this ->select($args); if(!empty($result)){ return $result[0]; }else{ return null; } } public function getRowSql($sql, $limited = false) { if ($limited == true) { $sql = trim($sql . ' LIMIT 1'); } $result=$this ->query($sql); if(!empty($result)){ return $result[0]; }else{ return null; } } public function getOne($sql,$field, $limited = false){ if ($limited == true) { $sql = trim($sql . ' LIMIT 1'); } $res = $this->query($sql); if ($res !== NULL){ return $res[0][''.$field]; }else{ return false; } } public function getOneRow($sql, $limited = false){ if ($limited == true) { $sql = trim($sql . ' LIMIT 1'); } $res = $this->query($sql); if ($res !== NULL){ return $res[0]; }else{ return false; } } public function getAll($sql){ $res = $this->query($sql); if ($res !== NULL){ return $res; }else{ return false; } } public function getCol($sql,$field) { $res = $this->query($sql); if ($res !== NULL) { $arr = array(); foreach($res as $k=>$v){ $arr[]=$v[$field]; } return $arr; } else { return false; } } public function getColSql($sql) { $res = $this->query($sql); if ($res !== NULL) { $arr = array(); foreach($res as $k=>$v){ $arr[]=$v[0]; } return $arr; } else { return false; } } public function selectLimit($sql, $num, $start = 0) { if ($start == 0) { $sql .= ' LIMIT ' . $num; } else { $sql .= ' LIMIT ' . $start . ', ' . $num; } return $this->query($sql); } }defined("HAS_ONE") or define("HAS_ONE", "HAS_ONE"); defined("HAS_MANY") or define("HAS_MANY", "HAS_MANY"); defined("BELONGS_TO") or define("BELONGS_TO", "BELONGS_TO"); defined("MANY_TO_MANY") or define("MANY_TO_MANY", "MANY_TO_MANY"); class RelationModel extends Model { public $join = array(); private function check_join($table) { if (!empty($this->joinTable) && !in_array($table, $this->joinTable)) { return false; } else { return true; } } protected function init() { $opt = array( 'trigger' => true, 'joinTable' => array(), ); foreach ($opt as $n => $v) { $this->$n = $v; } } private function checkJoinSet($set) { if (empty($set['type']) || !in_array($set['type'], array(HAS_ONE, HAS_MANY, BELONGS_TO, MANY_TO_MANY)) ) { error("关联定义规则[type]设置错误"); return false; } if (empty($set['foreign_key'])) { error("关联定义规则[foreign_key]设置错误"); return false; } if (empty($set['parent_key'])) { error("关联定义规则[parent_key]设置错误"); return false; } return true; } public function select($data = array()) { $trigger=$this->trigger; $this->trigger=true; $pri = $this->db->pri; $result = call_user_func(array($this->db, __FUNCTION__), $data); if (!$result || $this->joinTable===false || empty($this->join) || !is_array($this->join)) { $this->error = $this->db->error; $trigger and $this->__after_select($result); $this->init(); return $result; } foreach ($this->join as $table => $set) { if (!$this->check_join($table)) continue; if (!$this->checkJoinSet($set)) continue; $fk = $set['foreign_key']; $pk = $set['parent_key']; $db = M($table); $field = ""; if (isset($set['field'])) { $field = $set['field']; } switch ($set['type']) { case HAS_ONE: foreach ($result as $n => $d) { $s = $db->field($field)->where($fk . '=' . $d[$pri])->find(); if (is_array($s)) { $result[$n] = array_merge($d, $s); } } break; case HAS_MANY: foreach ($result as $n => $d) { $s = $db->field($field)->where($fk . '=' . $d[$pri])->all(); if (is_array($s)) { $result[$n][$table] = $s; } } break; case BELONGS_TO: foreach ($result as $n => $d) { $s = $db->field($field)->where($pk . '=' . $d[$fk])->find(); if (is_array($s)) { $result[$n] = array_merge($d, $s); } } break; case MANY_TO_MANY: if (!isset($set['relation_table'])) break; foreach ($result as $n => $d) { $s = $db->table($set['relation_table'])->field($fk)->where($pk . '=' . $d[$pri])->all(); if (is_array($s)) { $_id = array(); foreach ($s as $_s) { $_id[] = $_s[$fk]; } $result[$n][$table] = $db->table($table)->in($_id)->all(); } } break; } } $this->error = $this->db->error; $trigger and $this->__after_select($result); $data = empty($result) ? null : $result; $this->init(); return $data; } public function insert($data = array(), $type = "INSERT") { $this->data($data); $data = $this->data; $trigger=$this->trigger; $trigger and $this->__before_insert($data); if (empty($data)) { $this->error = "没有任何数据用于INSERT！"; $this->init(); $this->data=array(); $this->trigger=true; return false; } $id = call_user_func(array($this->db, __FUNCTION__), $data, $type); if (!$id || $this->joinTable===false || empty($this->join) || !is_array($this->join)) { $this->error = $this->db->error; $trigger and $this->__after_insert($id); $this->init(); $this->data=array(); $this->trigger=true; return $id; } $result_id = array(); $result_id[$this->table] = $id; foreach ($this->join as $table => $set) { if (empty($data[$table]) || !is_array($data[$table])) continue; if (!$this->check_join($table)) continue; if (!$this->checkJoinSet($set)) continue; $fk = $set['foreign_key']; $pk = $set['parent_key']; $db = M($table); switch ($set['type']) { case HAS_ONE: $data[$table][$fk] = $id; $result_id[$table] = $db->insert($data[$table], $type); break; case HAS_MANY: $result_id[$table] = array(); foreach ($data[$table] as $d) { if (is_array($d)) { $d[$fk] = $id; $result_id[$table][] = $db->insert($d, $type); } } break; case BELONGS_TO: $_id = $db->add($data[$table]); $db->table($this->table)->where("id=" . $id)->save(array($fk => $_id)); $result_id[$table] = $_id; break; case MANY_TO_MANY: if (!isset($set['relation_table'])) break; $_id = $db->add($data[$table]); $result_id[$table] = $_id; $_r_id = $db->table($set['relation_table'])->insert(array($pk => $id, $fk => $_id), $type); $result_id[$set['relation_table']] = $_r_id; } } $this->error = $this->db->error; $result = empty($result_id) ? null : $result_id; $trigger and $this->__after_insert($result); $this->init(); $this->data=array(); $this->trigger=true; return $result; } public function update($data = array()) { $this->data($data); $data = $this->data; $trigger=$this->trigger; $trigger and $this->__before_update($data); if (empty($data)) { $this->error = "没有任何数据用于UPDATE！"; $trigger and $this->__after_update(NULL); $this->init(); $this->data=array(); $this->trigger=true; return false; } $stat = call_user_func(array($this->db, __FUNCTION__), $data); if (!$stat || $this->joinTable===false || empty($this->join) || !is_array($this->join)) { $this->error = $this->db->error; $trigger and $this->__after_update($stat); $this->init(); $this->data=array(); $this->trigger=true; return $stat; } $pri = $this->db->pri; $where = preg_replace('@\s*WHERE@i', '', $this->db->opt_old['where']); $_p = M($this->table)->field($pri)->where($where)->find(); $id = $_p[$pri]; $result_id = array(); $result_id[$this->table] = $stat; foreach ($this->join as $table => $set) { if (empty($data[$table]) || !is_array($data[$table])) continue; if (!$this->check_join($table)) continue; if (!$this->checkJoinSet($set)) continue; $fk = $set['foreign_key']; $pk = $set['parent_key']; $db = M($table); switch ($set['type']) { case HAS_ONE: $data[$table][$fk] = $id; $db->where("$fk=$id")->save($data[$table]); break; case HAS_MANY: $db->where($fk . '=' . $id)->del(); foreach ($data[$table] as $d) { if (is_array($d)) { $d[$fk] = $id; $db->replace($d); } } break; CASE BELONGS_TO: $temp = $db->table($this->table)->find($id); $data[$table][$pk] = $temp[$fk]; $result_id[$table] = $db->save($data[$table]); break; case MANY_TO_MANY: if (!isset($set['relation_table'])) break; $result_id[$table] = $db->save($data[$table]); break; } } $this->error = $this->db->error; $result = empty($result_id) ? null : $result_id; $trigger and $this->__after_update($result); $this->init(); $this->data=array(); $this->trigger=true; return $result; } public function delete($data = array()) { $trigger=$this->trigger; $this->trigger=true; $trigger and $this->__before_delete($data); $id = M($this->table)->where($data)->select(); if (!$id) { $this->init(); return true; } $this->db->opt = $this->db->opt_old; $stat = call_user_func(array($this->db, __FUNCTION__)); if (!$stat || $this->joinTable===false || empty($this->join) || !is_array($this->join)) { $this->error = $this->db->error; $trigger and $this->__after_delete($stat); $this->init(); return $stat; } $result_id = array(); $result_id[$this->table] = $stat; foreach ($this->join as $table => $set) { if (!$this->check_join($table)) continue; if (!$this->checkJoinSet($set)) continue; $fk = $set['foreign_key']; $pk = $set['parent_key']; $db = M($table); switch ($set['type']) { case HAS_ONE: case HAS_MANY: foreach ($id as $p) { $result_id[$table] = $db->where($fk . '=' . $p[$pk])->delete(); } break; CASE BELONGS_TO: break; case MANY_TO_MANY: foreach ($id as $p) { $result_id[$table] = $db->table($set['relation_table'])->where($pk . '=' . $p[$pk])->delete(); } break; } } $this->error = $this->db->error; $result = empty($result_id) ? null : $result_id; $trigger and $this->__after_delete($result); $this->init(); return $result; } }defined("INNER_JOIN") or define("INNER_JOIN", "INNER JOIN"); defined("LEFT_JOIN") or define("LEFT_JOIN", "LEFT JOIN"); defined("RIGHT_JOIN") or define("RIGHT_JOIN", "RIGHT JOIN"); class ViewModel extends Model { public $view = array(); protected function init() { $opt = array( 'trigger' => true, 'joinTable' => array(), ); foreach ($opt as $n => $v) { $this->$n = $v; } } private function check_join($table) { if ($this->joinTable === false) { return false; } else if (is_array($this->joinTable) && !empty($this->joinTable) && !in_array($table, $this->joinTable)) { return false; } else { return true; } } private function checkViewSet($set) { if (empty($set['type']) || !in_array($set['type'], array(INNER_JOIN, LEFT_JOIN, RIGHT_JOIN)) ) { error("关联定义规则[type]设置错误"); return false; } if (empty($set['on'])) { error("关联定义规则[on]设置错误"); return false; } return true; } public function setJoinTable() { if ($this->joinTable === false || empty($this->view)) { return; } $from = " " . $this->tableFull . " "; foreach ($this->view as $table => $set) { if (!$this->check_join($table)) continue; if (!$this->checkViewSet($set)) continue; $_table = C("DB_PREFIX") . $table; $from .= $set['type'] . " " . $_table . " "; $from .= " ON " . $set['on'] . " "; } $this->db->opt['table'] = preg_replace('@(\w+?\.[a-z]+?)@i', C('DB_PREFIX') . '\1', $from); } public function count($args = "") { $this->setJoinTable(); $this->init(); return parent::count($args); } public function select($data = array()) { $this->setJoinTable($data); $this->init(); return parent::select($data); } }if (!defined("ZHPHP_PATH")) exit('No direct script access allowed'); final class ViewZh extends View { public $vars = array(); public $const = array(); public $tplFile = null; public $compileFile = null; public $compileContent=null; public function resetDefault(){ $this->vars=array(); $this->const=array(); $this->tplFile=null; $this->compileFile=null; $this->compileContent=null; } public function display($tplFile = null, $cacheTime = null, $cachePath = null, $contentType = "text/html", $charset = "", $show = true) { $cacheName = md5($_SERVER['REQUEST_URI']); $cacheTime = is_numeric($cacheTime) ? $cacheTime : intval(C("CACHE_TPL_TIME")); $cachePath = $cachePath ? $cachePath : CACHE_PATH; $content = null; if ($cacheTime >= 0) { $content = S($cacheName, false, $cacheTime, array("dir" => $cachePath, 'zip'=>false,"Driver" => "File")); } if (!$content) { $this -> tplFile = $this -> getTemplateFile($tplFile); $this -> setGlobalsVars(); if (!$this -> tplFile) return; $this -> compileFile = COMPILE_PATH . substr(md5(APP . CONTROL . METHOD . $this -> tplFile), 0, 20) . '.php'; if (DEBUG) { Debug::$tpl[] = array(basename($this -> tplFile), $this -> compileFile); } if ($this -> compileInvalid($tplFile)) { $this -> compile(); } $_CONFIG = C(); $_LANGUAGE = L(); if (!empty($this -> vars)) { extract($this -> vars); } ob_start(); include ($this -> compileFile); $content = ob_get_clean(); if ($cacheTime >= 0) { is_dir(CACHE_PATH) || dir_create(CACHE_PATH); S($cacheName, $content, $cacheTime, array("dir" => $cachePath,'zip'=>false, "Driver" => "File")); } } if ($show) { $charset = strtoupper(C("CHARSET")) == 'UTF8' ? "UTF-8" : strtoupper(C("CHARSET")); if (!headers_sent()) { header("Content-type:" . $contentType . ';charset=' . $charset); } echo $content; } else { return $content; } } public function getCompileContent() { return file_get_contents($this -> compileFile); } public function contentCompile($content="") { $this->compileContent=$content; $this -> compileFile = COMPILE_PATH . substr(md5(APP . CONTROL . METHOD ), 0, 20) . '.php'; $compileObj = new ViewCompile($this); $phpContent= $compileObj -> runContent(); if (!empty($this -> vars)) { extract($this -> vars); } ob_start(); include ($this -> compileFile); $content = ob_get_clean(); $this->resetDefault(); return $content; } public function compile() { if (!$this -> compileInvalid()) return; $compileObj = new ViewCompile($this); $compileObj -> run(); } private function compileInvalid() { $tplFile = $this -> tplFile; $compileFile = $this -> compileFile; return DEBUG || !file_exists($compileFile) || (filemtime($tplFile) > filemtime($compileFile)); } public function setGlobalsVars() { $constData = get_defined_constants(true); foreach ($constData['user'] as $name => $value) { $name = str_replace('_', '', $name); $GLOBALS['user'][$name] = $value; } } public function assign($var, $value) { if (is_array($var)) { foreach ($var as $k => $v) { if (is_string($k)) $this -> vars[$k] = $v; } } else { $this -> vars[$var] = $value; } } public function fetch($tplFile = null, $cacheTime = null, $cachePath = null, $contentType = "text/html", $charset = "") { return $this -> display($tplFile, $cacheTime, $cachePath, $contentType, $charset, false); } public function isCache($cachePath = null) { $cachePath = $cachePath ? $cachePath : CACHE_PATH; $cacheName = md5($_SERVER['REQUEST_URI']); return S($cacheName, false, null, array("dir" => $cachePath, "Driver" => "File")) ? true : false; } }if (!defined("ZHPHP_PATH")) exit('No direct script access allowed'); abstract class View{ protected function getTemplateFile($file){ if (is_null($file)) { $file = TPL_PATH . CONTROL . '/' . METHOD; } else if (!strstr($file, '/')) { $file = TPL_PATH . CONTROL . '/' . $file; } if (!preg_match('@\.[a-z]+$@', $file)){ $file .= C('TPL_FIX'); } if (is_file($file)) { return $file; } else { if (DEBUG) halt("模板不存在:$file"); else return null; } } }if (!defined("ZHPHP_PATH")) exit('No direct script access allowed'); class ViewFactory { public static $viewFactory = ''; protected $driverList = array(); private function __construct() { } public static function factory($driver = null) { if (self::$viewFactory == '') { self::$viewFactory = new viewFactory(); } if (is_null($driver)) { $driver = ucfirst(strtolower(C("TPL_ENGINE"))); } if (isset(self::$viewFactory -> driverList[$driver])) { return self::$viewFactory -> driverList[$driver]; } self::$viewFactory -> getDriver($driver); return self::$viewFactory -> driverList[$driver]; } public function getDriver($driver) { if (isset($this -> driverList[$driver])) { return $this -> driverList[$driver]; } $class = "View" . ucfirst($driver); if (!class_exists($class, false)) { $classFile = ZHPHP_DRIVER_PATH . 'View/' . $class . '.class.php'; if (!require_cache($classFile)) { DEBUG && halt($classFile . "不存在"); } } $this -> driverList[$driver] = new $class(); return true; } }if (!defined("ZHPHP_PATH")) exit('No direct script access allowed'); class ViewCompile { public $view; public $content; private $left; private $right; private $condition = array( "\s+neq\s+" => " <> ", "\s+eq\s+" => " == ", "\s+gt\s+" => " > ", "\s+egt\s+" => " >= ", "\s+lt\s+" => " < ", "\s+elt\s+" => " <= " ); private $functionAlias = array( "default" => "_default" ); function __construct(&$view = null) { $this->left = C("TPL_TAG_LEFT"); $this->right = C("TPL_TAG_RIGHT"); $this->view = $view; } public function run(){ if(!empty($this->view->compileContent)){ $this->content = $this->view->compileContent; }else{ $this->content = file_get_contents($this->view->tplFile); } $this->loadParseTags(); $this->replaceGlobalFunc(); $this->compile(); $this->parseTokey(); $this->replaceConst(); $this->content = '<?php if(!defined("ZHPHP_PATH"))exit;C("SHOW_NOTICE",FALSE);?>' . $this->content; if (!is_dir(COMPILE_PATH)) { Dir::create(COMPILE_PATH); copy(ZHPHP_TPL_PATH . 'index.html', COMPILE_PATH . 'index.html'); } file_put_contents($this->view->compileFile, $this->content); $safeFile = dirname($this->view->compileFile) . "/index.html"; is_file($safeFile) or Dir::safeFile(dirname($safeFile)); } public function runContent(){ if(!empty($this->view->compileContent)){ $this->content = $this->view->compileContent; }else{ $this->content = file_get_contents($this->view->tplFile); } $this->loadParseTags(); $this->replaceGlobalFunc(); $this->compile(); $this->parseTokey(); $this->replaceConst(); $this->content = '<?php if(!defined("ZHPHP_PATH"))exit;C("SHOW_NOTICE",FALSE);?>' . $this->content; if (!is_dir(COMPILE_PATH)) { Dir::create(COMPILE_PATH); copy(ZHPHP_TPL_PATH . 'index.html', COMPILE_PATH . 'index.html'); } file_put_contents($this->view->compileFile, $this->content); $safeFile = dirname($this->view->compileFile) . "/index.html"; is_file($safeFile) or Dir::safeFile(dirname($safeFile)); } private function loadParseTags(){ $tagClass = array(); $tags = C('TPL_TAGS'); if (!empty($tags) && is_array($tags)) { foreach ($tags as $file) { $file = str_replace(".", "/", $file); $info = explode("/", $file); $class=array_pop($info); if (class_exists($class, false)) { }else if (require_array(array( TAG_PATH . $file . '.class.php', COMMON_TAG_PATH . $file . '.class.php' ))){ }else if (import($file)) { }else { if (DEBUG) { halt("标签类文件{$class}不存在"); } else { continue; } } $tmp = explode(".", $class); $tagClass[] = array_pop($tmp); } } if (import('ZHPHP.Lib.Driver.View.ViewTag')) { $tagClass[] = 'ViewTag'; $this->parseTagClass($tagClass); } } private function parseTagClass($tagClass){ foreach ($tagClass as $class) { $tagObj = new $class(); $tagMethod = get_class_methods($class); foreach ($tagMethod as $tagName) { $block = 1; $level = 1; $tagName = substr($tagName, 1); if (isset($tagObj->tag)) { $tagSet = $tagObj->tag; $block = isset($tagSet[$tagName]['block']) ? $tagSet[$tagName]['block'] : 1; $level = isset($tagSet[$tagName]['level']) ? $tagSet[$tagName]['level'] : 1; } for ($i = 0; $i < $level; $i++) { if (!$this->compileTag($tagName, $tagObj, $block)) { $i = 100; } } } } } private function compileTag($tagName, &$tagObj, $block = 1){ $arr = ''; $arr = ''; if ($block) { $preg = '/' . $this->left . $tagName . "(?:\s+(.*)" . $this->right . "|" . $this->right . ")(.*)" . substr($this->left, 0, 1) . "\/" . substr($this->left, 1) . $tagName . $this->right . '/isU'; } else { $preg = '/' . $this->left . $tagName . '(?:\s+(.*)\/?' . $this->right . "|(\s*)\/?" . $this->right . ")/isU"; } $stat = preg_match_all($preg, $this->content, $arr, PREG_SET_ORDER); foreach ($arr as $k) { $k[1] = $this->replaceCondition($k[1]); $attr = $this->getTagAttr($k[1]); $k[2] = isset($k[2]) ? $k['2'] : ''; $content = call_user_func_array(array($tagObj, '_' . $tagName), array($attr, $k[2], $this->view)); $this->content = str_replace($k[0], $content, $this->content); } return true; } private function getTagAttr($attrCon) { $pregAttr = '/\s*' . '(\w+)\s*=\s*(["\'])(.*)\2/iU'; $attrs = ''; preg_match_all($pregAttr, $attrCon, $attrs, PREG_SET_ORDER); $attrArr = array(); foreach ($attrs as $k) { $k[3] = trim($this->parsePhpVar($k[3])); if(strstr($k[3], '$')){ $attrArr[$k[1]]=$k[3]; }else{ if((is_numeric($k[3]))){ $attrArr[$k[1]]=$k[3]; }else{ if((defined($k[3]))){ $attrArr[$k[1]]=$k[3]; }else{ $attrArr[$k[1]]=$k[3]; } } } } return array_change_key_case($attrArr); } private function parsePhpVar($content, $type = 0){ $parseConstCon = $this->parseConst($content); $parseGlobalCon = $this->parseGlobalConst($parseConstCon); $replaceLangCon = $this->replaceLangConfig($parseGlobalCon); $content = $this->removeEmpty($replaceLangCon); if ($type == 0) { $preg = '/([\'\"]?)(\$[^=!<>\s\)\(]+)\1/is'; } else { $preg = '/([\'\"]?)(\$[^=!<>\)\(]+)\1/is'; } $vars = false; preg_match_all($preg, $content, $vars, PREG_SET_ORDER); if (empty($vars)) { return $content; } foreach ($vars as $v) { $v[2] = trim($v[2]); $content = str_replace($v[2], $this->formatVar($v[2]), $content); } return $content; } private function formatVar($var){ $varArr = preg_split("/\s*\|\s*/", $var); $varBase = array_shift($varArr); $func = $varArr; $preg = array( "/\.\'/", "/'\./", '/\."/', '/"\./', '/{/', '/}/', ); $replace = array( "/\./", "/\./", '/\./', '/\./', '/{/', '/}/', ); $con = preg_replace($preg, $replace, $varBase); $var = explode('.', $con); $varName = array_shift($var); $varStr = ''; if (count($var) > 0) { foreach ($var as $v) { if(is_numeric($v) || strstr($v, '$') ){ $varStr .="[{$v}]"; }else{ $varStr .= '[\'' . $v . '\']'; } } } $varName .= str_replace("]'", "']", $varStr); if (!empty($func)) { if (!function_exists("replaceyinhao")) { function replaceyinhao($con) { return "'" . str_replace(":", "####", $con[2]) . "'"; } } foreach ($func as $function) { $function = preg_replace_callback('/(\'|")(.*)\1/i', "replaceyinhao", $function); $funcArr = explode(":", $function); $functionName = array_shift($funcArr); $funcName = array_key_exists($functionName, $this->functionAlias) ? $this->functionAlias[$functionName] : $functionName; if (isset($funcArr[0])) { if (strstr($funcArr[0], "@@")) { $varName = str_replace("@@", trim($varName, ','), $funcArr[0]); }else { $varName = trim($varName, ',') . ',' . $funcArr[0]; } } $varName = str_replace("####", ":", $varName); $varName = $funcName . '(' . trim($varName, ',') . '),'; } } return trim($varName, ','); } private function removeEmpty($content) { $preg = array( '/[{}]/', '/\s*\|\s*/', '/\s*:\s*/', '/\s*,\s*/', ); $replace = array( '', '|', ':', ',', ); return preg_replace($preg, $replace, $content); } private function replaceLangConfig($content) { $preg = array( '/\$zh.config\.(\w+)\s*/is', '/\$zh.language\.(\w+)\s*/is' ); $replace = array( 'C("\1")', 'L("\1")' ); return preg_replace($preg, $replace, $content); } private function parseGlobalConst($content) { $preg = '/\$Zh.(get|post|request|cookie|session|server)\./ise'; $replace = '\'\$_\'.strtoupper("\1").".";'; return preg_replace($preg, $replace, $content); } private function parseConst($content) { $preg = '/\$Zh[\.\[]([\'"])?const\1?[\.\]]([^=!<>\}]*)/is'; if (!function_exists("replace_view_const")) { function replace_view_const($args) { $name = strtoupper($args[2]); return defined($name) ? $name : $args[2]; } } return preg_replace_callback($preg, "replace_view_const", $content); } private function replaceCondition($content) { foreach ($this->condition as $k => $v) { $content = preg_replace("/$k/", $v, $content); } return $content; } private function replaceGlobalFunc() { $this->content = preg_replace('/\{\|(\w+):(.*?)\}/i', '<?php echo \1(\2);?>', $this->content); $this->content = preg_replace('/\{\|(\w+)\((.*?)\}/i', '<?php echo \1(\2;?>', $this->content); } public function compile() { $preg = '/{(\$[^=!<>\)\(\+\;]+)}/ieU'; $this->content = preg_replace($preg, '\'<?php echo \'. $this->parseVar(\'\1\').\';?>\';', $this->content); } private function parseVar($content) { $stripContent = stripslashes($content); $parseConstContent = $this->parseConst($stripContent); $content = $this->parsePhpVar($parseConstContent, 1); return $content; } private function parseTokey() { if (!C("TOKEN_ON")) return; echo __FILE__.'----'.__CLASS__.'----'.__METHOD__;die; } private function replaceConst() { $const = print_const(false, true); foreach ($const as $k => $v) { if (!strstr($k, '__')) continue; $this->content = str_replace($k, $v, $this->content); } } }final class Dir{ static public function dirPath($dir_name) { $dirname = str_ireplace("\\", "/", $dir_name); return substr($dirname, "-1") == "/" ? $dirname : $dirname . "/"; } static public function tree($dirName = null, $exts = '', $son = 0, $list = array()) { if (is_null($dirName)){ $dirName = '.'; } $dirPath = self::dirPath($dirName); static $id = 0; if (is_array($exts)){ $exts = implode("|", $exts); } foreach (glob($dirPath . '*') as $v) { $id++; if (is_dir($v) || !$exts || preg_match("/\.($exts)/i", $v)) { $list [$id] ['name'] = basename($v); $list [$id] ['path'] = str_replace("\\", "/", realpath($v)); $list [$id] ['type'] = filetype($v); $list [$id] ['filemtime'] = filemtime($v); $list [$id] ['fileatime'] = fileatime($v); $list [$id] ['size'] = is_file($v) ? filesize($v) : self::get_dir_size($v); $list [$id] ['iswrite'] = is_writeable($v) ? 1 : 0; $list [$id] ['isread'] = is_readable($v) ? 1 : 0; } if ($son) { if (is_dir($v)) { $list = self::tree($v, $exts, $son = 1, $list); } } } return $list; } static public function del($dirName) { if (is_file($dirName)) { unlink($dirName); return true; } $dirPath = self::dirPath($dirName); if(!is_dir($dirPath))return true; foreach (glob($dirPath . "*") as $v) { is_dir($v) ? self::del($v) : unlink($v); } return @rmdir($dirName); } static public function get_dir_size($f) { $s = 0; foreach (glob($f . '/*') as $v) { $s += is_file($v) ? filesize($v) : self::get_dir_size($v); } return $s; } static public function create($dirName, $auth = 0755){ $dirPath = self::dirPath($dirName); if (is_dir($dirPath)) return true; $dirs = explode('/', $dirPath); $dir = ''; foreach ($dirs as $v) { $dir .= $v . '/'; if (is_dir($dir)) continue; mkdir($dir, $auth); } return is_dir($dirPath); } static public function safeFile($dirName, $recursive = false) { static $s = array(); $file = ZHPHP_TPL_PATH . '/index.html'; if (!is_dir($dirName)) return; $dirPath = self::dirPath($dirName); is_file($dirPath . 'index.html') || copy($file, $dirPath . 'index.html'); foreach (glob($dirPath . "*") as $d) { if (is_dir($d) && !in_array($d, $s)) { $s[] = $d; is_file($d . '/index.html') || copy($file, $d . '/index.html'); $recursive && self::safeFile($d); } } } }C(array ( 'charset' => 'utf8', 'default_time_zone' => 'PRC', 'html_path' => 'html/', 'language' => '', 'auth_key' => 'HouDunWang', 'check_file_case' => false, 'auto_load_file' => array ( ), 'filter_function' => array ( 0 => 'htmlspecialchars', 1 => 'strip_tags', ), 'db_driver' => 'mysqli', 'db_charset' => 'utf8', 'db_host' => '127.0.0.1', 'db_port' => 3306, 'db_user' => 'root', 'db_password' => '', 'db_database' => '', 'db_prefix' => '', 'db_backup' => 'backup/', 'db_pconnect' => false, 'storage_driver' => 'File', 'token_on' => false, 'token_name' => '__TOKEN__', '404_url' => '', 'error_url' => '', 'error_message' => '网站出错了，请稍候再试...', 'show_notice' => true, 'log_size' => 2000000, 'log_record' => true, 'log_level' => array ( 0 => 'FATAL', 1 => 'ERROR', 2 => 'WARNING', 3 => 'SQL', ), 'log_exception_record' => true, 'session_auto_start' => true, 'session_type' => '', 'session_options' => array ( ), 'cookie_expire' => 0, 'cookie_domain' => '', 'cookie_path' => '/', 'cookie_prefix' => '', 'https' => false, 'url_rewrite' => false, 'url_type' => 1, 'pathinfo_dli' => '/', 'pathinfo_var' => 'q', 'pathinfo_html' => '.html', 'var_group' => 'g', 'var_app' => 'a', 'var_control' => 'c', 'var_method' => 'm', 'default_name' => '@', 'default_group' => 'App', 'default_app' => 'index', 'default_control' => 'Index', 'default_method' => 'index', 'control_fix' => 'Control', 'model_fix' => 'Model', 'route' => array ( ), 'cache_type' => 'file', 'cache_time' => 3600, 'cache_memcache' => array ( 'host' => '127.0.0.1', 'port' => 11211, 'timeout' => 1, 'weight' => 1, 'pconnect' => 1, ), 'cache_redis' => array ( 'host' => '127.0.0.1', 'port' => 6379, 'password' => '', 'timeout' => 1, 'db' => 0, 'pconnect' => 0, ), 'cache_select_time' => -1, 'cache_select_length' => 30, 'cache_tpl_time' => -1, 'upload_thumb_on' => false, 'upload_ext_size' => array ( 'jpg' => 5000000, 'jpeg' => 5000000, 'gif' => 5000000, 'png' => 5000000, 'bmg' => 5000000, 'zip' => 5000000, 'txt' => 5000000, 'rar' => 5000000, 'doc' => 5000000, ), 'upload_path' => 'upload/', 'upload_img_dir' => '', 'upload_img_resize_on' => false, 'upload_img_max_width' => 1000, 'upload_img_max_height' => 1000, 'water_on' => true, 'water_font' => 'D:/wamp/www/his/zh/ZHPHP/zhphp/Data/Font/font.ttf', 'water_img' => 'D:/wamp/www/his/zh/ZHPHP/zhphp/Data/Image/water.png', 'water_pos' => 9, 'water_pct' => 60, 'water_quality' => 80, 'water_text' => 'WWW.HOUDUNWANG.COM', 'water_text_color' => '#f00f00', 'water_text_size' => 12, 'thumb_prefix' => '', 'thumb_endfix' => '_thumb', 'thumb_type' => 5, 'thumb_width' => 300, 'thumb_height' => 300, 'thumb_path' => '', 'code_font' => 'D:/wamp/www/his/zh/ZHPHP/zhphp/Data/Font/font.ttf', 'code_str' => '23456789abcdefghjkmnpqrstuvwsyz', 'code_width' => 120, 'code_height' => 35, 'code_bg_color' => '#ffffff', 'code_len' => 4, 'code_font_size' => 20, 'code_font_color' => '', 'page_var' => 'page', 'page_row' => 10, 'page_show_row' => 10, 'page_style' => 2, 'page_desc' => array ( 'pre' => '前へ', 'next' => '次へ', 'first' => 'トップ', 'end' => '尾页', 'unit' => '件', ), 'tpl_path' => '', 'tpl_style' => '', 'tpl_fix' => '.html', 'tpl_tags' => array ( ), 'tpl_error' => 'error.html', 'tpl_success' => 'success.html', 'tpl_engine' => 'ZH', 'tpl_tag_left' => '<', 'tpl_tag_right' => '>', 'cart_name' => 'cart', 'editor_type' => 2, 'editor_style' => 1, 'editor_max_str' => 2000, 'editor_width' => '100%', 'editor_height' => 300, 'editor_file_size' => 2000000, 'editor_save_path' => 'upload/editor/', 'rbac_type' => 1, 'rbac_super_admin' => 'super_admin', 'rbac_username_field' => 'username', 'rbac_password_field' => 'password', 'rbac_auth_key' => 'uid', 'rbac_no_auth' => array ( ), 'rbac_user_table' => 'user', 'rbac_role_table' => 'role', 'rbac_node_table' => 'node', 'rbac_role_user_table' => 'user_role', 'access_table' => 'access', 'email_username' => '', 'email_password' => '', 'email_host' => '', 'email_port' => 25, 'email_ssl' => 0, 'email_charset' => 'utf8', 'email_formmail' => '', 'email_fromname' => 'ZHCMS', 'core_event' => array ( ), ));L(array ( ));alias_import(array ( 'ip' => 'D:/wamp/www/his/zh/ZHPHP/zhphp/Extend/Org/Ip/Ip.class.php', 'mail' => 'D:/wamp/www/his/zh/ZHPHP/zhphp/Extend/Org/Mail/Mail.class.php', 'ueditor_upload' => 'D:/wamp/www/his/zh/ZHPHP/zhphp/Extend/Org/Ueditor/php/ueditor_upload.php', 'keditor_upload' => 'D:/wamp/www/his/zh/ZHPHP/zhphp/Extend/Org/Keditor/php/upload_json.php', 'hd_uploadify' => 'D:/wamp/www/his/zh/ZHPHP/zhphp/Extend/Org/Uploadify/hd_uploadify.php', 'hd_uploadify_del' => 'D:/wamp/www/his/zh/ZHPHP/zhphp/Extend/Org/Uploadify/hd_uploadify.php', 'editorcatcherurl' => 'D:/wamp/www/his/zh/ZHPHP/zhphp/Extend/Org/Editor/Ueditor/php/ueditorCatcherUrl.php', ));ZHPHP::init();App::run();?>